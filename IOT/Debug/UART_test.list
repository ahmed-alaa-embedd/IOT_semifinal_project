
UART_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080013d0  080013d0  000113d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014c4  080014c4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080014c4  080014c4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014c4  080014c4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014c4  080014c4  000114c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014c8  080014c8  000114c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080014cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000068  08001534  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08001534  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bda  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007b3  00000000  00000000  00021c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00022420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000128  00000000  00000000  000225c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002525  00000000  00000000  000226e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014a8  00000000  00000000  00024c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009708  00000000  00000000  000260b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004c  00000000  00000000  0002f7bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008ac  00000000  00000000  0002f80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	080013b8 	.word	0x080013b8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	080013b8 	.word	0x080013b8

08000170 <HEsp_voidInit>:

u8 Quotes	[]= "\""	;
u8 Comma 	[]	 = {","};

void HEsp_voidInit()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	u8 Local_u8Result =0;
 8000176:	2300      	movs	r3, #0
 8000178:	71fb      	strb	r3, [r7, #7]

	//check for ok
	while(Local_u8Result == 0)
 800017a:	e007      	b.n	800018c <HEsp_voidInit+0x1c>
	{
		//Echo disable
		MUSART1_voidTransmit("ATE0\r\n");
 800017c:	480e      	ldr	r0, [pc, #56]	; (80001b8 <HEsp_voidInit+0x48>)
 800017e:	f000 fba3 	bl	80008c8 <MUSART1_voidTransmit>
		//if recieve OK then break while loop
		Local_u8Result = u8EspValidateCmd(ECHO_TIMEOUT);
 8000182:	2064      	movs	r0, #100	; 0x64
 8000184:	f000 f8ee 	bl	8000364 <u8EspValidateCmd>
 8000188:	4603      	mov	r3, r0
 800018a:	71fb      	strb	r3, [r7, #7]
	while(Local_u8Result == 0)
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f4      	beq.n	800017c <HEsp_voidInit+0xc>

	}

	Local_u8Result =0;
 8000192:	2300      	movs	r3, #0
 8000194:	71fb      	strb	r3, [r7, #7]

	//check for ok
	while(Local_u8Result== 0)
 8000196:	e007      	b.n	80001a8 <HEsp_voidInit+0x38>
	{
		//set station mode
		MUSART1_voidTransmit("AT+CWMODE=1\r\n");
 8000198:	4808      	ldr	r0, [pc, #32]	; (80001bc <HEsp_voidInit+0x4c>)
 800019a:	f000 fb95 	bl	80008c8 <MUSART1_voidTransmit>
		//if recieve OK then break while loop
		Local_u8Result = u8EspValidateCmd(MODE_TIMEOUT);
 800019e:	2096      	movs	r0, #150	; 0x96
 80001a0:	f000 f8e0 	bl	8000364 <u8EspValidateCmd>
 80001a4:	4603      	mov	r3, r0
 80001a6:	71fb      	strb	r3, [r7, #7]
	while(Local_u8Result== 0)
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d0f4      	beq.n	8000198 <HEsp_voidInit+0x28>
	}

}
 80001ae:	bf00      	nop
 80001b0:	bf00      	nop
 80001b2:	3708      	adds	r7, #8
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	080013d0 	.word	0x080013d0
 80001bc:	080013d8 	.word	0x080013d8

080001c0 <HEsp_voidConnectOnWifi>:
void HEsp_voidConnectOnWifi(u8 *Copy_u8Name, u8 *Copy_u8Password)	//AT+CWJAP_CUR="Name","Pass"
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b0a0      	sub	sp, #128	; 0x80
 80001c4:	af04      	add	r7, sp, #16
 80001c6:	6078      	str	r0, [r7, #4]
 80001c8:	6039      	str	r1, [r7, #0]
	u8 Local_u8Result = 0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	u8 Local_u8Data[100] = {0};
 80001d0:	2300      	movs	r3, #0
 80001d2:	60bb      	str	r3, [r7, #8]
 80001d4:	f107 030c 	add.w	r3, r7, #12
 80001d8:	2260      	movs	r2, #96	; 0x60
 80001da:	2100      	movs	r1, #0
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 fca9 	bl	8000b34 <memset>

	sprintf(Local_u8Data,"AT+CWJAP_CUR=%s%s%s,%s%s%s\r\n",Quotes,Copy_u8Name,Quotes,Quotes,Copy_u8Password,Quotes);
 80001e2:	f107 0008 	add.w	r0, r7, #8
 80001e6:	4b11      	ldr	r3, [pc, #68]	; (800022c <HEsp_voidConnectOnWifi+0x6c>)
 80001e8:	9303      	str	r3, [sp, #12]
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	9302      	str	r3, [sp, #8]
 80001ee:	4b0f      	ldr	r3, [pc, #60]	; (800022c <HEsp_voidConnectOnWifi+0x6c>)
 80001f0:	9301      	str	r3, [sp, #4]
 80001f2:	4b0e      	ldr	r3, [pc, #56]	; (800022c <HEsp_voidConnectOnWifi+0x6c>)
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a0c      	ldr	r2, [pc, #48]	; (800022c <HEsp_voidConnectOnWifi+0x6c>)
 80001fa:	490d      	ldr	r1, [pc, #52]	; (8000230 <HEsp_voidConnectOnWifi+0x70>)
 80001fc:	f000 fca2 	bl	8000b44 <siprintf>


	//check for ok
	while(Local_u8Result== 0)
 8000200:	e00a      	b.n	8000218 <HEsp_voidConnectOnWifi+0x58>
	{
		//send Name and pass
		MUSART1_voidTransmit(Local_u8Data);
 8000202:	f107 0308 	add.w	r3, r7, #8
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fb5e 	bl	80008c8 <MUSART1_voidTransmit>
		//if recieve OK then break while loop
		Local_u8Result = u8EspValidateCmd(ROUTER_TIMEOUT);
 800020c:	4809      	ldr	r0, [pc, #36]	; (8000234 <HEsp_voidConnectOnWifi+0x74>)
 800020e:	f000 f8a9 	bl	8000364 <u8EspValidateCmd>
 8000212:	4603      	mov	r3, r0
 8000214:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	while(Local_u8Result== 0)
 8000218:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800021c:	2b00      	cmp	r3, #0
 800021e:	d0f0      	beq.n	8000202 <HEsp_voidConnectOnWifi+0x42>
	}


}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	3770      	adds	r7, #112	; 0x70
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20000000 	.word	0x20000000
 8000230:	080013e8 	.word	0x080013e8
 8000234:	00432380 	.word	0x00432380

08000238 <HEsp_voidConnectOnServer>:
void HEsp_voidConnectOnServer(u8 *Copy_u8IP)//AT+CIPSTART="TCP","162.253.155.226",80
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b0a0      	sub	sp, #128	; 0x80
 800023c:	af04      	add	r7, sp, #16
 800023e:	6078      	str	r0, [r7, #4]
	u8 Local_u8Result = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	u8 Local_u8Data[100] = {0};
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	f107 030c 	add.w	r3, r7, #12
 800024e:	2260      	movs	r2, #96	; 0x60
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fc6e 	bl	8000b34 <memset>

	sprintf(Local_u8Data,"AT+CIPSTART=%sTCP%s,%s%s%s,80\r\n",Quotes,Quotes,Quotes,Copy_u8IP,Quotes);
 8000258:	f107 0008 	add.w	r0, r7, #8
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <HEsp_voidConnectOnServer+0x64>)
 800025e:	9302      	str	r3, [sp, #8]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	9301      	str	r3, [sp, #4]
 8000264:	4b0d      	ldr	r3, [pc, #52]	; (800029c <HEsp_voidConnectOnServer+0x64>)
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <HEsp_voidConnectOnServer+0x64>)
 800026a:	4a0c      	ldr	r2, [pc, #48]	; (800029c <HEsp_voidConnectOnServer+0x64>)
 800026c:	490c      	ldr	r1, [pc, #48]	; (80002a0 <HEsp_voidConnectOnServer+0x68>)
 800026e:	f000 fc69 	bl	8000b44 <siprintf>


	//check for ok
	while(Local_u8Result== 0)
 8000272:	e00a      	b.n	800028a <HEsp_voidConnectOnServer+0x52>
	{
		//send IP
		MUSART1_voidTransmit(Local_u8Data);
 8000274:	f107 0308 	add.w	r3, r7, #8
 8000278:	4618      	mov	r0, r3
 800027a:	f000 fb25 	bl	80008c8 <MUSART1_voidTransmit>
		//if recieve OK then break while loop
		Local_u8Result = u8EspValidateCmd(SERVER_TIMEOUT);
 800027e:	4809      	ldr	r0, [pc, #36]	; (80002a4 <HEsp_voidConnectOnServer+0x6c>)
 8000280:	f000 f870 	bl	8000364 <u8EspValidateCmd>
 8000284:	4603      	mov	r3, r0
 8000286:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	while(Local_u8Result== 0)
 800028a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800028e:	2b00      	cmp	r3, #0
 8000290:	d0f0      	beq.n	8000274 <HEsp_voidConnectOnServer+0x3c>
	}


}
 8000292:	bf00      	nop
 8000294:	bf00      	nop
 8000296:	3770      	adds	r7, #112	; 0x70
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000000 	.word	0x20000000
 80002a0:	08001408 	.word	0x08001408
 80002a4:	0010c8e0 	.word	0x0010c8e0

080002a8 <HEsp_voidSendData>:
/*AT+CIPSEND=45
GET http://ahmedarm.freevar.com/status.txt
=43 letter + enter %ctr(j)=44
* */
u8 HEsp_voidSendData(u8 Copy_u8DataSize,u8 *Copy_u8WebSite)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b09e      	sub	sp, #120	; 0x78
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	6039      	str	r1, [r7, #0]
 80002b2:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Result = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	u8 Local_u8Data[100] = {0};
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	2260      	movs	r2, #96	; 0x60
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fc34 	bl	8000b34 <memset>

	sprintf(Local_u8Data,"AT+CIPSEND=%d\r\n",Copy_u8DataSize);
 80002cc:	79fa      	ldrb	r2, [r7, #7]
 80002ce:	f107 030c 	add.w	r3, r7, #12
 80002d2:	4921      	ldr	r1, [pc, #132]	; (8000358 <HEsp_voidSendData+0xb0>)
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fc35 	bl	8000b44 <siprintf>


	//check for ok
	while(Local_u8Result== 0)
 80002da:	e00a      	b.n	80002f2 <HEsp_voidSendData+0x4a>
	{
		//send data size
		MUSART1_voidTransmit(Local_u8Data);
 80002dc:	f107 030c 	add.w	r3, r7, #12
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 faf1 	bl	80008c8 <MUSART1_voidTransmit>
		//if recieve OK then break while loop
		Local_u8Result = u8EspValidateCmd(PREREQUEST_TIMEOUT);
 80002e6:	20c8      	movs	r0, #200	; 0xc8
 80002e8:	f000 f83c 	bl	8000364 <u8EspValidateCmd>
 80002ec:	4603      	mov	r3, r0
 80002ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while(Local_u8Result== 0)
 80002f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f0      	beq.n	80002dc <HEsp_voidSendData+0x34>
	}


	//delete saved data to write a new one
	for(int i=0;i<80;i++)
 80002fa:	2300      	movs	r3, #0
 80002fc:	673b      	str	r3, [r7, #112]	; 0x70
 80002fe:	e008      	b.n	8000312 <HEsp_voidSendData+0x6a>
	{
		Local_u8Data[i]=0;
 8000300:	f107 020c 	add.w	r2, r7, #12
 8000304:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000306:	4413      	add	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<80;i++)
 800030c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800030e:	3301      	adds	r3, #1
 8000310:	673b      	str	r3, [r7, #112]	; 0x70
 8000312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000314:	2b4f      	cmp	r3, #79	; 0x4f
 8000316:	ddf3      	ble.n	8000300 <HEsp_voidSendData+0x58>
	}

	//send website
	sprintf(Local_u8Data,"GET http://%s/status.txt\r\n\r",Copy_u8WebSite);
 8000318:	f107 030c 	add.w	r3, r7, #12
 800031c:	683a      	ldr	r2, [r7, #0]
 800031e:	490f      	ldr	r1, [pc, #60]	; (800035c <HEsp_voidSendData+0xb4>)
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fc0f 	bl	8000b44 <siprintf>
	Local_u8Result=0;
 8000326:	2300      	movs	r3, #0
 8000328:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	//check for ok
	while(Local_u8Result== 0)
 800032c:	e00a      	b.n	8000344 <HEsp_voidSendData+0x9c>
	{
		//send data size
		MUSART1_voidTransmit(Local_u8Data);
 800032e:	f107 030c 	add.w	r3, r7, #12
 8000332:	4618      	mov	r0, r3
 8000334:	f000 fac8 	bl	80008c8 <MUSART1_voidTransmit>
		//if recieve OK then break while loop
		Local_u8Result = u8EspValidateCmd(REQUEST_TIMEOUT);
 8000338:	4809      	ldr	r0, [pc, #36]	; (8000360 <HEsp_voidSendData+0xb8>)
 800033a:	f000 f813 	bl	8000364 <u8EspValidateCmd>
 800033e:	4603      	mov	r3, r0
 8000340:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while(Local_u8Result== 0)
 8000344:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f0      	beq.n	800032e <HEsp_voidSendData+0x86>
	}
	return Local_u8Result;
 800034c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8000350:	4618      	mov	r0, r3
 8000352:	3778      	adds	r7, #120	; 0x78
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	08001428 	.word	0x08001428
 800035c:	08001438 	.word	0x08001438
 8000360:	000dbba0 	.word	0x000dbba0

08000364 <u8EspValidateCmd>:
// delete it and put it in the above section


u8 u8EspValidateCmd(u32 Copy_u32timeout) //private func
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b09c      	sub	sp, #112	; 0x70
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	u8 Local_u8Response[100] ={0};
 800036c:	2300      	movs	r3, #0
 800036e:	60bb      	str	r3, [r7, #8]
 8000370:	f107 030c 	add.w	r3, r7, #12
 8000374:	2260      	movs	r2, #96	; 0x60
 8000376:	2100      	movs	r1, #0
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fbdb 	bl	8000b34 <memset>
	u8 i=0;
 800037e:	2300      	movs	r3, #0
 8000380:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	u8 Local_u8Dummy = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	u8 Local_u8Result = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	while(Local_u8Dummy != 255)
 8000390:	e013      	b.n	80003ba <u8EspValidateCmd+0x56>
	{
		Local_u8Dummy=MUSART1_u8Receive(Copy_u32timeout);
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f000 fabe 	bl	8000914 <MUSART1_u8Receive>
 8000398:	4603      	mov	r3, r0
 800039a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		Local_u8Response[i] = Local_u8Dummy;
 800039e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80003a2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80003a6:	4413      	add	r3, r2
 80003a8:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80003ac:	f803 2c68 	strb.w	r2, [r3, #-104]
		i++;
 80003b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80003b4:	3301      	adds	r3, #1
 80003b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	while(Local_u8Dummy != 255)
 80003ba:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80003be:	2bff      	cmp	r3, #255	; 0xff
 80003c0:	d1e7      	bne.n	8000392 <u8EspValidateCmd+0x2e>
	}

	//check for ok
	for(i=0;i<99;i++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80003c8:	e042      	b.n	8000450 <u8EspValidateCmd+0xec>
	{
		if(Local_u8Response[i] == 'O' && Local_u8Response[i+1] == 'K' )
 80003ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80003ce:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80003d2:	4413      	add	r3, r2
 80003d4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80003d8:	2b4f      	cmp	r3, #79	; 0x4f
 80003da:	d10e      	bne.n	80003fa <u8EspValidateCmd+0x96>
 80003dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80003e0:	3301      	adds	r3, #1
 80003e2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80003e6:	4413      	add	r3, r2
 80003e8:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80003ec:	2b4b      	cmp	r3, #75	; 0x4b
 80003ee:	d104      	bne.n	80003fa <u8EspValidateCmd+0x96>
		{
			Local_u8Result = i;
 80003f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80003f4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
			break;
 80003f8:	e02e      	b.n	8000458 <u8EspValidateCmd+0xf4>
		}
		//add check for error on putty
		else if(Local_u8Response[i] == 'E' && Local_u8Response[i+1] == 'R'&& Local_u8Response[i+2] == 'R')
 80003fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80003fe:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000402:	4413      	add	r3, r2
 8000404:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000408:	2b45      	cmp	r3, #69	; 0x45
 800040a:	d118      	bne.n	800043e <u8EspValidateCmd+0xda>
 800040c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000410:	3301      	adds	r3, #1
 8000412:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000416:	4413      	add	r3, r2
 8000418:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800041c:	2b52      	cmp	r3, #82	; 0x52
 800041e:	d10e      	bne.n	800043e <u8EspValidateCmd+0xda>
 8000420:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000424:	3302      	adds	r3, #2
 8000426:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800042a:	4413      	add	r3, r2
 800042c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000430:	2b52      	cmp	r3, #82	; 0x52
 8000432:	d104      	bne.n	800043e <u8EspValidateCmd+0xda>
		{
			Local_u8Result = i;
 8000434:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000438:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
			break;
 800043c:	e00c      	b.n	8000458 <u8EspValidateCmd+0xf4>
		}
		else
		{
			Local_u8Result = i;
 800043e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000442:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	for(i=0;i<99;i++)
 8000446:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800044a:	3301      	adds	r3, #1
 800044c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000450:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000454:	2b62      	cmp	r3, #98	; 0x62
 8000456:	d9b8      	bls.n	80003ca <u8EspValidateCmd+0x66>
		}

	}
	for(i=0;i<99;i++)
 8000458:	2300      	movs	r3, #0
 800045a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800045e:	e039      	b.n	80004d4 <u8EspValidateCmd+0x170>
	{
		if(Local_u8Response[i] == '+' && Local_u8Response[i+1] == 'I' )
 8000460:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000464:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000468:	4413      	add	r3, r2
 800046a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800046e:	2b2b      	cmp	r3, #43	; 0x2b
 8000470:	d125      	bne.n	80004be <u8EspValidateCmd+0x15a>
 8000472:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000476:	3301      	adds	r3, #1
 8000478:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800047c:	4413      	add	r3, r2
 800047e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000482:	2b49      	cmp	r3, #73	; 0x49
 8000484:	d11b      	bne.n	80004be <u8EspValidateCmd+0x15a>
		{
			if(Local_u8Response[i+7] == '1')
 8000486:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800048a:	3307      	adds	r3, #7
 800048c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000490:	4413      	add	r3, r2
 8000492:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000496:	2b31      	cmp	r3, #49	; 0x31
 8000498:	d103      	bne.n	80004a2 <u8EspValidateCmd+0x13e>
			{
				Local_u8Result = 1;
 800049a:	2301      	movs	r3, #1
 800049c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				break;
 80004a0:	e01c      	b.n	80004dc <u8EspValidateCmd+0x178>
			}
			else if(Local_u8Response[i+7] == '0')
 80004a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80004a6:	3307      	adds	r3, #7
 80004a8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80004ac:	4413      	add	r3, r2
 80004ae:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80004b2:	2b30      	cmp	r3, #48	; 0x30
 80004b4:	d108      	bne.n	80004c8 <u8EspValidateCmd+0x164>
			{
				Local_u8Result = 35;
 80004b6:	2323      	movs	r3, #35	; 0x23
 80004b8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				break;
 80004bc:	e00e      	b.n	80004dc <u8EspValidateCmd+0x178>
			}

		}
		else
		{
			Local_u8Result = i;
 80004be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80004c2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 80004c6:	e000      	b.n	80004ca <u8EspValidateCmd+0x166>
			if(Local_u8Response[i+7] == '1')
 80004c8:	bf00      	nop
	for(i=0;i<99;i++)
 80004ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80004ce:	3301      	adds	r3, #1
 80004d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80004d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80004d8:	2b62      	cmp	r3, #98	; 0x62
 80004da:	d9c1      	bls.n	8000460 <u8EspValidateCmd+0xfc>
		}
	}
	return Local_u8Result;
 80004dc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3770      	adds	r7, #112	; 0x70
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <MGPIO_VoidSetPinDirection>:
#include "GPIO_int.h"



void MGPIO_VoidSetPinDirection(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8MODE)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	460b      	mov	r3, r1
 80004f4:	71bb      	strb	r3, [r7, #6]
 80004f6:	4613      	mov	r3, r2
 80004f8:	717b      	strb	r3, [r7, #5]
	switch(copy_u8PORT)
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d07a      	beq.n	80005f6 <MGPIO_VoidSetPinDirection+0x10e>
 8000500:	2b02      	cmp	r3, #2
 8000502:	f300 80b1 	bgt.w	8000668 <MGPIO_VoidSetPinDirection+0x180>
 8000506:	2b00      	cmp	r3, #0
 8000508:	d002      	beq.n	8000510 <MGPIO_VoidSetPinDirection+0x28>
 800050a:	2b01      	cmp	r3, #1
 800050c:	d03a      	beq.n	8000584 <MGPIO_VoidSetPinDirection+0x9c>
					copy_u8PIN = copy_u8PIN-8;
					GPIOC_CRH &= ~((0b1111)<<(copy_u8PIN*4));  
					GPIOC_CRH |= ((copy_u8MODE)<<(copy_u8PIN*4));
				}
				break;
		default: break;
 800050e:	e0ab      	b.n	8000668 <MGPIO_VoidSetPinDirection+0x180>
			if(copy_u8PIN <= 7)			/* if PIN<7 CRH is not activated as else cancel 
 8000510:	79bb      	ldrb	r3, [r7, #6]
 8000512:	2b07      	cmp	r3, #7
 8000514:	d817      	bhi.n	8000546 <MGPIO_VoidSetPinDirection+0x5e>
					GPIOA_CRL &= ~((0b1111)<<(copy_u8PIN*4));  /*we CLR first as 0 OR 1 will 
 8000516:	4b5a      	ldr	r3, [pc, #360]	; (8000680 <MGPIO_VoidSetPinDirection+0x198>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	79ba      	ldrb	r2, [r7, #6]
 800051c:	0092      	lsls	r2, r2, #2
 800051e:	210f      	movs	r1, #15
 8000520:	fa01 f202 	lsl.w	r2, r1, r2
 8000524:	43d2      	mvns	r2, r2
 8000526:	4611      	mov	r1, r2
 8000528:	4a55      	ldr	r2, [pc, #340]	; (8000680 <MGPIO_VoidSetPinDirection+0x198>)
 800052a:	400b      	ands	r3, r1
 800052c:	6013      	str	r3, [r2, #0]
					GPIOA_CRL |= ((copy_u8MODE)<<(copy_u8PIN*4));
 800052e:	4b54      	ldr	r3, [pc, #336]	; (8000680 <MGPIO_VoidSetPinDirection+0x198>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	7979      	ldrb	r1, [r7, #5]
 8000534:	79ba      	ldrb	r2, [r7, #6]
 8000536:	0092      	lsls	r2, r2, #2
 8000538:	fa01 f202 	lsl.w	r2, r1, r2
 800053c:	4611      	mov	r1, r2
 800053e:	4a50      	ldr	r2, [pc, #320]	; (8000680 <MGPIO_VoidSetPinDirection+0x198>)
 8000540:	430b      	orrs	r3, r1
 8000542:	6013      	str	r3, [r2, #0]
				break;
 8000544:	e092      	b.n	800066c <MGPIO_VoidSetPinDirection+0x184>
			else if(copy_u8PIN <= 15)	
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	2b0f      	cmp	r3, #15
 800054a:	f200 808f 	bhi.w	800066c <MGPIO_VoidSetPinDirection+0x184>
					copy_u8PIN = copy_u8PIN-8;
 800054e:	79bb      	ldrb	r3, [r7, #6]
 8000550:	3b08      	subs	r3, #8
 8000552:	71bb      	strb	r3, [r7, #6]
					GPIOA_CRH &= ~((0b1111)<<(copy_u8PIN*4));  
 8000554:	4b4b      	ldr	r3, [pc, #300]	; (8000684 <MGPIO_VoidSetPinDirection+0x19c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	79ba      	ldrb	r2, [r7, #6]
 800055a:	0092      	lsls	r2, r2, #2
 800055c:	210f      	movs	r1, #15
 800055e:	fa01 f202 	lsl.w	r2, r1, r2
 8000562:	43d2      	mvns	r2, r2
 8000564:	4611      	mov	r1, r2
 8000566:	4a47      	ldr	r2, [pc, #284]	; (8000684 <MGPIO_VoidSetPinDirection+0x19c>)
 8000568:	400b      	ands	r3, r1
 800056a:	6013      	str	r3, [r2, #0]
					GPIOA_CRH |= ((copy_u8MODE)<<(copy_u8PIN*4));
 800056c:	4b45      	ldr	r3, [pc, #276]	; (8000684 <MGPIO_VoidSetPinDirection+0x19c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	7979      	ldrb	r1, [r7, #5]
 8000572:	79ba      	ldrb	r2, [r7, #6]
 8000574:	0092      	lsls	r2, r2, #2
 8000576:	fa01 f202 	lsl.w	r2, r1, r2
 800057a:	4611      	mov	r1, r2
 800057c:	4a41      	ldr	r2, [pc, #260]	; (8000684 <MGPIO_VoidSetPinDirection+0x19c>)
 800057e:	430b      	orrs	r3, r1
 8000580:	6013      	str	r3, [r2, #0]
				break;
 8000582:	e073      	b.n	800066c <MGPIO_VoidSetPinDirection+0x184>
			if(copy_u8PIN <= 7)		/* if PIN<7 CRH is not activated as else cancel 
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	2b07      	cmp	r3, #7
 8000588:	d817      	bhi.n	80005ba <MGPIO_VoidSetPinDirection+0xd2>
					GPIOB_CRL &= ~((0b1111)<<(copy_u8PIN*4));  /*we CLR first as 0 OR 1 will 
 800058a:	4b3f      	ldr	r3, [pc, #252]	; (8000688 <MGPIO_VoidSetPinDirection+0x1a0>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	79ba      	ldrb	r2, [r7, #6]
 8000590:	0092      	lsls	r2, r2, #2
 8000592:	210f      	movs	r1, #15
 8000594:	fa01 f202 	lsl.w	r2, r1, r2
 8000598:	43d2      	mvns	r2, r2
 800059a:	4611      	mov	r1, r2
 800059c:	4a3a      	ldr	r2, [pc, #232]	; (8000688 <MGPIO_VoidSetPinDirection+0x1a0>)
 800059e:	400b      	ands	r3, r1
 80005a0:	6013      	str	r3, [r2, #0]
					GPIOB_CRL |= ((copy_u8MODE)<<(copy_u8PIN*4));
 80005a2:	4b39      	ldr	r3, [pc, #228]	; (8000688 <MGPIO_VoidSetPinDirection+0x1a0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	7979      	ldrb	r1, [r7, #5]
 80005a8:	79ba      	ldrb	r2, [r7, #6]
 80005aa:	0092      	lsls	r2, r2, #2
 80005ac:	fa01 f202 	lsl.w	r2, r1, r2
 80005b0:	4611      	mov	r1, r2
 80005b2:	4a35      	ldr	r2, [pc, #212]	; (8000688 <MGPIO_VoidSetPinDirection+0x1a0>)
 80005b4:	430b      	orrs	r3, r1
 80005b6:	6013      	str	r3, [r2, #0]
				break;
 80005b8:	e05a      	b.n	8000670 <MGPIO_VoidSetPinDirection+0x188>
			else if(copy_u8PIN <= 15)
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	d857      	bhi.n	8000670 <MGPIO_VoidSetPinDirection+0x188>
					copy_u8PIN = copy_u8PIN-8;	/*pins enters is more than 7 so we use PIN-8
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	3b08      	subs	r3, #8
 80005c4:	71bb      	strb	r3, [r7, #6]
					GPIOB_CRH &= ~((0b1111)<<(copy_u8PIN*4));  
 80005c6:	4b31      	ldr	r3, [pc, #196]	; (800068c <MGPIO_VoidSetPinDirection+0x1a4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	79ba      	ldrb	r2, [r7, #6]
 80005cc:	0092      	lsls	r2, r2, #2
 80005ce:	210f      	movs	r1, #15
 80005d0:	fa01 f202 	lsl.w	r2, r1, r2
 80005d4:	43d2      	mvns	r2, r2
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a2c      	ldr	r2, [pc, #176]	; (800068c <MGPIO_VoidSetPinDirection+0x1a4>)
 80005da:	400b      	ands	r3, r1
 80005dc:	6013      	str	r3, [r2, #0]
					GPIOB_CRH |= ((copy_u8MODE)<<(copy_u8PIN*4));
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <MGPIO_VoidSetPinDirection+0x1a4>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	7979      	ldrb	r1, [r7, #5]
 80005e4:	79ba      	ldrb	r2, [r7, #6]
 80005e6:	0092      	lsls	r2, r2, #2
 80005e8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ec:	4611      	mov	r1, r2
 80005ee:	4a27      	ldr	r2, [pc, #156]	; (800068c <MGPIO_VoidSetPinDirection+0x1a4>)
 80005f0:	430b      	orrs	r3, r1
 80005f2:	6013      	str	r3, [r2, #0]
				break;
 80005f4:	e03c      	b.n	8000670 <MGPIO_VoidSetPinDirection+0x188>
			if(copy_u8PIN <= 7)  /* if PIN<7 CRH is not activated as else cancel 
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	2b07      	cmp	r3, #7
 80005fa:	d817      	bhi.n	800062c <MGPIO_VoidSetPinDirection+0x144>
					GPIOC_CRL &= ~((0b1111)<<(copy_u8PIN*4));  /*we CLR first as 0 OR 1 will 
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MGPIO_VoidSetPinDirection+0x1a8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	79ba      	ldrb	r2, [r7, #6]
 8000602:	0092      	lsls	r2, r2, #2
 8000604:	210f      	movs	r1, #15
 8000606:	fa01 f202 	lsl.w	r2, r1, r2
 800060a:	43d2      	mvns	r2, r2
 800060c:	4611      	mov	r1, r2
 800060e:	4a20      	ldr	r2, [pc, #128]	; (8000690 <MGPIO_VoidSetPinDirection+0x1a8>)
 8000610:	400b      	ands	r3, r1
 8000612:	6013      	str	r3, [r2, #0]
					GPIOC_CRL |= ((copy_u8MODE)<<(copy_u8PIN*4));
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <MGPIO_VoidSetPinDirection+0x1a8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	7979      	ldrb	r1, [r7, #5]
 800061a:	79ba      	ldrb	r2, [r7, #6]
 800061c:	0092      	lsls	r2, r2, #2
 800061e:	fa01 f202 	lsl.w	r2, r1, r2
 8000622:	4611      	mov	r1, r2
 8000624:	4a1a      	ldr	r2, [pc, #104]	; (8000690 <MGPIO_VoidSetPinDirection+0x1a8>)
 8000626:	430b      	orrs	r3, r1
 8000628:	6013      	str	r3, [r2, #0]
				break;
 800062a:	e023      	b.n	8000674 <MGPIO_VoidSetPinDirection+0x18c>
			else if(copy_u8PIN <= 15)
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	2b0f      	cmp	r3, #15
 8000630:	d820      	bhi.n	8000674 <MGPIO_VoidSetPinDirection+0x18c>
					copy_u8PIN = copy_u8PIN-8;
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	3b08      	subs	r3, #8
 8000636:	71bb      	strb	r3, [r7, #6]
					GPIOC_CRH &= ~((0b1111)<<(copy_u8PIN*4));  
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MGPIO_VoidSetPinDirection+0x1ac>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	79ba      	ldrb	r2, [r7, #6]
 800063e:	0092      	lsls	r2, r2, #2
 8000640:	210f      	movs	r1, #15
 8000642:	fa01 f202 	lsl.w	r2, r1, r2
 8000646:	43d2      	mvns	r2, r2
 8000648:	4611      	mov	r1, r2
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MGPIO_VoidSetPinDirection+0x1ac>)
 800064c:	400b      	ands	r3, r1
 800064e:	6013      	str	r3, [r2, #0]
					GPIOC_CRH |= ((copy_u8MODE)<<(copy_u8PIN*4));
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MGPIO_VoidSetPinDirection+0x1ac>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	7979      	ldrb	r1, [r7, #5]
 8000656:	79ba      	ldrb	r2, [r7, #6]
 8000658:	0092      	lsls	r2, r2, #2
 800065a:	fa01 f202 	lsl.w	r2, r1, r2
 800065e:	4611      	mov	r1, r2
 8000660:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <MGPIO_VoidSetPinDirection+0x1ac>)
 8000662:	430b      	orrs	r3, r1
 8000664:	6013      	str	r3, [r2, #0]
				break;
 8000666:	e005      	b.n	8000674 <MGPIO_VoidSetPinDirection+0x18c>
		default: break;
 8000668:	bf00      	nop
 800066a:	e004      	b.n	8000676 <MGPIO_VoidSetPinDirection+0x18e>
				break;
 800066c:	bf00      	nop
 800066e:	e002      	b.n	8000676 <MGPIO_VoidSetPinDirection+0x18e>
				break;
 8000670:	bf00      	nop
 8000672:	e000      	b.n	8000676 <MGPIO_VoidSetPinDirection+0x18e>
				break;
 8000674:	bf00      	nop
	}
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	40010800 	.word	0x40010800
 8000684:	40010804 	.word	0x40010804
 8000688:	40010c00 	.word	0x40010c00
 800068c:	40010c04 	.word	0x40010c04
 8000690:	40011000 	.word	0x40011000
 8000694:	40011004 	.word	0x40011004

08000698 <MGPIO_VoidSetPinValue>:
			default: break;
		}
}

void MGPIO_VoidSetPinValue(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8VALUE)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	460b      	mov	r3, r1
 80006a4:	71bb      	strb	r3, [r7, #6]
 80006a6:	4613      	mov	r3, r2
 80006a8:	717b      	strb	r3, [r7, #5]
	switch(copy_u8PORT)
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d040      	beq.n	8000732 <MGPIO_VoidSetPinValue+0x9a>
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	dc5b      	bgt.n	800076c <MGPIO_VoidSetPinValue+0xd4>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <MGPIO_VoidSetPinValue+0x26>
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d01d      	beq.n	80006f8 <MGPIO_VoidSetPinValue+0x60>
			else if(copy_u8VALUE == LOW)	//set pin value low
				{
					CLR_BIT(GPIOC_ODR , copy_u8PIN);
				}
					break;
		default: break;
 80006bc:	e056      	b.n	800076c <MGPIO_VoidSetPinValue+0xd4>
			if(copy_u8VALUE == HIGH)	 	//set pin value high
 80006be:	797b      	ldrb	r3, [r7, #5]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d10a      	bne.n	80006da <MGPIO_VoidSetPinValue+0x42>
					SET_BIT(GPIOA_ODR , copy_u8PIN);
 80006c4:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <MGPIO_VoidSetPinValue+0xec>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	79ba      	ldrb	r2, [r7, #6]
 80006ca:	2101      	movs	r1, #1
 80006cc:	fa01 f202 	lsl.w	r2, r1, r2
 80006d0:	4611      	mov	r1, r2
 80006d2:	4a2c      	ldr	r2, [pc, #176]	; (8000784 <MGPIO_VoidSetPinValue+0xec>)
 80006d4:	430b      	orrs	r3, r1
 80006d6:	6013      	str	r3, [r2, #0]
					break;
 80006d8:	e04a      	b.n	8000770 <MGPIO_VoidSetPinValue+0xd8>
			else if(copy_u8VALUE == LOW)	//set pin value low
 80006da:	797b      	ldrb	r3, [r7, #5]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d147      	bne.n	8000770 <MGPIO_VoidSetPinValue+0xd8>
					CLR_BIT(GPIOA_ODR , copy_u8PIN);
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MGPIO_VoidSetPinValue+0xec>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	2101      	movs	r1, #1
 80006e8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ec:	43d2      	mvns	r2, r2
 80006ee:	4611      	mov	r1, r2
 80006f0:	4a24      	ldr	r2, [pc, #144]	; (8000784 <MGPIO_VoidSetPinValue+0xec>)
 80006f2:	400b      	ands	r3, r1
 80006f4:	6013      	str	r3, [r2, #0]
					break;
 80006f6:	e03b      	b.n	8000770 <MGPIO_VoidSetPinValue+0xd8>
			if(copy_u8VALUE == HIGH)		//set pin value high
 80006f8:	797b      	ldrb	r3, [r7, #5]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d10a      	bne.n	8000714 <MGPIO_VoidSetPinValue+0x7c>
					SET_BIT(GPIOB_ODR , copy_u8PIN);
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <MGPIO_VoidSetPinValue+0xf0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	79ba      	ldrb	r2, [r7, #6]
 8000704:	2101      	movs	r1, #1
 8000706:	fa01 f202 	lsl.w	r2, r1, r2
 800070a:	4611      	mov	r1, r2
 800070c:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <MGPIO_VoidSetPinValue+0xf0>)
 800070e:	430b      	orrs	r3, r1
 8000710:	6013      	str	r3, [r2, #0]
					break;
 8000712:	e02f      	b.n	8000774 <MGPIO_VoidSetPinValue+0xdc>
			else if(copy_u8VALUE == LOW)	//set pin value LOW
 8000714:	797b      	ldrb	r3, [r7, #5]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d12c      	bne.n	8000774 <MGPIO_VoidSetPinValue+0xdc>
					CLR_BIT(GPIOB_ODR , copy_u8PIN);
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MGPIO_VoidSetPinValue+0xf0>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	79ba      	ldrb	r2, [r7, #6]
 8000720:	2101      	movs	r1, #1
 8000722:	fa01 f202 	lsl.w	r2, r1, r2
 8000726:	43d2      	mvns	r2, r2
 8000728:	4611      	mov	r1, r2
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MGPIO_VoidSetPinValue+0xf0>)
 800072c:	400b      	ands	r3, r1
 800072e:	6013      	str	r3, [r2, #0]
					break;
 8000730:	e020      	b.n	8000774 <MGPIO_VoidSetPinValue+0xdc>
			if(copy_u8VALUE == HIGH)		//set pin value high
 8000732:	797b      	ldrb	r3, [r7, #5]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d10a      	bne.n	800074e <MGPIO_VoidSetPinValue+0xb6>
					SET_BIT(GPIOC_ODR , copy_u8PIN);
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MGPIO_VoidSetPinValue+0xf4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	79ba      	ldrb	r2, [r7, #6]
 800073e:	2101      	movs	r1, #1
 8000740:	fa01 f202 	lsl.w	r2, r1, r2
 8000744:	4611      	mov	r1, r2
 8000746:	4a11      	ldr	r2, [pc, #68]	; (800078c <MGPIO_VoidSetPinValue+0xf4>)
 8000748:	430b      	orrs	r3, r1
 800074a:	6013      	str	r3, [r2, #0]
					break;
 800074c:	e014      	b.n	8000778 <MGPIO_VoidSetPinValue+0xe0>
			else if(copy_u8VALUE == LOW)	//set pin value low
 800074e:	797b      	ldrb	r3, [r7, #5]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d111      	bne.n	8000778 <MGPIO_VoidSetPinValue+0xe0>
					CLR_BIT(GPIOC_ODR , copy_u8PIN);
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MGPIO_VoidSetPinValue+0xf4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	79ba      	ldrb	r2, [r7, #6]
 800075a:	2101      	movs	r1, #1
 800075c:	fa01 f202 	lsl.w	r2, r1, r2
 8000760:	43d2      	mvns	r2, r2
 8000762:	4611      	mov	r1, r2
 8000764:	4a09      	ldr	r2, [pc, #36]	; (800078c <MGPIO_VoidSetPinValue+0xf4>)
 8000766:	400b      	ands	r3, r1
 8000768:	6013      	str	r3, [r2, #0]
					break;
 800076a:	e005      	b.n	8000778 <MGPIO_VoidSetPinValue+0xe0>
		default: break;
 800076c:	bf00      	nop
 800076e:	e004      	b.n	800077a <MGPIO_VoidSetPinValue+0xe2>
					break;
 8000770:	bf00      	nop
 8000772:	e002      	b.n	800077a <MGPIO_VoidSetPinValue+0xe2>
					break;
 8000774:	bf00      	nop
 8000776:	e000      	b.n	800077a <MGPIO_VoidSetPinValue+0xe2>
					break;
 8000778:	bf00      	nop
	}
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	4001080c 	.word	0x4001080c
 8000788:	40010c0c 	.word	0x40010c0c
 800078c:	4001100c 	.word	0x4001100c

08000790 <RCC_voidInitSysClock>:
#include "RCC_config.h"



void RCC_voidInitSysClock(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	#if RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
	RCC_CR   = 0x00010000; /*Enable HSI with no bypass*/
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <RCC_voidInitSysClock+0x2c>)
 8000796:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800079a:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0x00000001; //select HSE clock as system clock 
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <RCC_voidInitSysClock+0x30>)
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]
	/*	wait until the HSE to be stable	*/
	while(GET_BIT(RCC_CR,17) == 0 );
 80007a2:	bf00      	nop
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <RCC_voidInitSysClock+0x2c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	0c5b      	lsrs	r3, r3, #17
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0f8      	beq.n	80007a4 <RCC_voidInitSysClock+0x14>
	
	#else  
		#error("you choose wrong clock type")
	
	#endif 
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40021004 	.word	0x40021004

080007c4 <RCC_voidEnableClock>:


void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PerId)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71bb      	strb	r3, [r7, #6]
	if(Copy_u8PerId <= 31)
 80007d4:	79bb      	ldrb	r3, [r7, #6]
 80007d6:	2b1f      	cmp	r3, #31
 80007d8:	d82a      	bhi.n	8000830 <RCC_voidEnableClock+0x6c>
		{
			switch(Copy_u8BusId)
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d01c      	beq.n	800081a <RCC_voidEnableClock+0x56>
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	dc25      	bgt.n	8000830 <RCC_voidEnableClock+0x6c>
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d002      	beq.n	80007ee <RCC_voidEnableClock+0x2a>
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d00b      	beq.n	8000804 <RCC_voidEnableClock+0x40>
	
	else
		{
			/*Return Error*/
		}
}
 80007ec:	e020      	b.n	8000830 <RCC_voidEnableClock+0x6c>
				case RCC_AHB 	: SET_BIT(RCC_AHBENR , Copy_u8PerId); break;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <RCC_voidEnableClock+0x78>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	79ba      	ldrb	r2, [r7, #6]
 80007f4:	2101      	movs	r1, #1
 80007f6:	fa01 f202 	lsl.w	r2, r1, r2
 80007fa:	4611      	mov	r1, r2
 80007fc:	4a0f      	ldr	r2, [pc, #60]	; (800083c <RCC_voidEnableClock+0x78>)
 80007fe:	430b      	orrs	r3, r1
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	e015      	b.n	8000830 <RCC_voidEnableClock+0x6c>
				case RCC_APB1 	: SET_BIT(RCC_APB1ENR , Copy_u8PerId); break;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <RCC_voidEnableClock+0x7c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	79ba      	ldrb	r2, [r7, #6]
 800080a:	2101      	movs	r1, #1
 800080c:	fa01 f202 	lsl.w	r2, r1, r2
 8000810:	4611      	mov	r1, r2
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <RCC_voidEnableClock+0x7c>)
 8000814:	430b      	orrs	r3, r1
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	e00a      	b.n	8000830 <RCC_voidEnableClock+0x6c>
				case RCC_APB2 	: SET_BIT(RCC_APB2ENR , Copy_u8PerId); break;
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <RCC_voidEnableClock+0x80>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	79ba      	ldrb	r2, [r7, #6]
 8000820:	2101      	movs	r1, #1
 8000822:	fa01 f202 	lsl.w	r2, r1, r2
 8000826:	4611      	mov	r1, r2
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <RCC_voidEnableClock+0x80>)
 800082a:	430b      	orrs	r3, r1
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	bf00      	nop
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40021014 	.word	0x40021014
 8000840:	4002101c 	.word	0x4002101c
 8000844:	40021018 	.word	0x40021018

08000848 <SysTick_Handler>:

	return RemainingTime;
}

void SysTick_Handler()	/*mwgoda f el .c m4 f el main */
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

	if(MSTK_Repeat == MSTK_SINGLE_INTERVAL)
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <SysTick_Handler+0x34>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d10e      	bne.n	8000872 <SysTick_Handler+0x2a>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK->CTRL, 1);
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <SysTick_Handler+0x38>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a09      	ldr	r2, [pc, #36]	; (8000880 <SysTick_Handler+0x38>)
 800085a:	f023 0302 	bic.w	r3, r3, #2
 800085e:	6013      	str	r3, [r2, #0]
		/*Stop timer and no repeating*/

		MSTK->CTRL=0;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <SysTick_Handler+0x38>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
		MSTK->LOAD = 0;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <SysTick_Handler+0x38>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
		MSTK->VAL=0;
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <SysTick_Handler+0x38>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
	}



	CALLBACK();
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <SysTick_Handler+0x3c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4798      	blx	r3
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000088 	.word	0x20000088
 8000880:	e000e010 	.word	0xe000e010
 8000884:	20000084 	.word	0x20000084

08000888 <MUSART1_voidInit>:
#include "USART_private.h"
#include "USART_config.h"


void MUSART1_voidInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	/*	baud rate = 115200		*/
	USART1 -> BRR = 0x45;
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <MUSART1_voidInit+0x3c>)
 800088e:	2245      	movs	r2, #69	; 0x45
 8000890:	609a      	str	r2, [r3, #8]

	SET_BIT((USART1-> CR[0]), 3);			/* Enabling Transmitter */
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MUSART1_voidInit+0x3c>)
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <MUSART1_voidInit+0x3c>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART1-> CR[0]), 2);			/* Enabling Receiver */
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MUSART1_voidInit+0x3c>)
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <MUSART1_voidInit+0x3c>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART1-> CR[0]), 13);			/* Enabling USART */
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MUSART1_voidInit+0x3c>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <MUSART1_voidInit+0x3c>)
 80008b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008b4:	60d3      	str	r3, [r2, #12]

	USART1 -> SR = 0;						/* Clearing status register */
 80008b6:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <MUSART1_voidInit+0x3c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	40013800 	.word	0x40013800

080008c8 <MUSART1_voidTransmit>:

void MUSART1_voidTransmit(u8 arr[])
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	u8 i = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]
	while(arr[i] != '\0'){
 80008d4:	e010      	b.n	80008f8 <MUSART1_voidTransmit+0x30>
		USART1 -> DR = arr[i];
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	781a      	ldrb	r2, [r3, #0]
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MUSART1_voidTransmit+0x48>)
 80008e0:	605a      	str	r2, [r3, #4]
		while((GET_BIT((USART1 -> SR), 6)) == 0);
 80008e2:	bf00      	nop
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MUSART1_voidTransmit+0x48>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	099b      	lsrs	r3, r3, #6
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f8      	beq.n	80008e4 <MUSART1_voidTransmit+0x1c>
		i++;
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	3301      	adds	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
	while(arr[i] != '\0'){
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1e8      	bne.n	80008d6 <MUSART1_voidTransmit+0xe>
	}

}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	40013800 	.word	0x40013800

08000914 <MUSART1_u8Receive>:

u8 MUSART1_u8Receive(u32 Copy_u32timeout)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	u32 timeOut=0;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]

			u8 Loc_u8ReceivedData = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	72fb      	strb	r3, [r7, #11]
			while((GET_BIT((USART1 -> SR), 5)) == 0)
 8000924:	e009      	b.n	800093a <MUSART1_u8Receive+0x26>
			{
				timeOut++;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	3301      	adds	r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
				if(timeOut==Copy_u32timeout)
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	429a      	cmp	r2, r3
 8000932:	d102      	bne.n	800093a <MUSART1_u8Receive+0x26>
				{
					Loc_u8ReceivedData = 255; //this var will not reach 255 as max value in ASCII table is 128
 8000934:	23ff      	movs	r3, #255	; 0xff
 8000936:	72fb      	strb	r3, [r7, #11]
					break;
 8000938:	e006      	b.n	8000948 <MUSART1_u8Receive+0x34>
			while((GET_BIT((USART1 -> SR), 5)) == 0)
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MUSART1_u8Receive+0x50>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	095b      	lsrs	r3, r3, #5
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0ee      	beq.n	8000926 <MUSART1_u8Receive+0x12>
				}
			}

				/* If no Errors */
				if( Loc_u8ReceivedData == 0 )
 8000948:	7afb      	ldrb	r3, [r7, #11]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d103      	bne.n	8000956 <MUSART1_u8Receive+0x42>
				{
					return USART1 -> DR;
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <MUSART1_u8Receive+0x50>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	e000      	b.n	8000958 <MUSART1_u8Receive+0x44>
				}
				/* If Error Occurs */
				else
				{

					return Loc_u8ReceivedData;
 8000956:	7afb      	ldrb	r3, [r7, #11]
				}

}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40013800 	.word	0x40013800

08000968 <main>:
#include "USART_interface.h"
#include "Esp_interface.h"


/************** APP functions ************/
void main(void){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

	/* Initialize the RCC to HSE */
	RCC_voidInitSysClock();
 800096e:	f7ff ff0f 	bl	8000790 <RCC_voidInitSysClock>

	//	/* Enable the clock for all ports */
	RCC_voidEnableClock(RCC_APB2, 2);		// Enable clock for GPIOA
 8000972:	2102      	movs	r1, #2
 8000974:	2002      	movs	r0, #2
 8000976:	f7ff ff25 	bl	80007c4 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2, 14);		/* Enable USART1 Clock */
 800097a:	210e      	movs	r1, #14
 800097c:	2002      	movs	r0, #2
 800097e:	f7ff ff21 	bl	80007c4 <RCC_voidEnableClock>

	//	/* Configure pins for UART */
	/* Setting A9 is the TX pin as Output alternate function push pull w max speed 50 MHz */
	MGPIO_VoidSetPinDirection(GPIOA,PIN9,OUTPUT_SPEED_50MHZ_AFPP);
 8000982:	220b      	movs	r2, #11
 8000984:	2109      	movs	r1, #9
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fdae 	bl	80004e8 <MGPIO_VoidSetPinDirection>
	/* Setting A10 is the RX pin as input floating */
	MGPIO_VoidSetPinDirection(GPIOA,PIN10,INPUT_FLOATING);
 800098c:	2204      	movs	r2, #4
 800098e:	210a      	movs	r1, #10
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fda9 	bl	80004e8 <MGPIO_VoidSetPinDirection>

	//Configure pins for System
	MGPIO_VoidSetPinDirection(GPIOA,PIN0,OUTPUT_SPEED_2MHZ_PP);	//DataLED
 8000996:	2202      	movs	r2, #2
 8000998:	2100      	movs	r1, #0
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff fda4 	bl	80004e8 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOA,PIN1,OUTPUT_SPEED_2MHZ_PP);	//ErrorLED
 80009a0:	2202      	movs	r2, #2
 80009a2:	2101      	movs	r1, #1
 80009a4:	2000      	movs	r0, #0
 80009a6:	f7ff fd9f 	bl	80004e8 <MGPIO_VoidSetPinDirection>

	//Initialize UART
	MUSART1_voidInit();
 80009aa:	f7ff ff6d 	bl	8000888 <MUSART1_voidInit>

	// it go through all but it never get OK at first it receive A then 255 (no data)
	// \n didn't transmit
	// check hardware
	/* Configure for WIFI */
	HEsp_voidInit();
 80009ae:	f7ff fbdf 	bl	8000170 <HEsp_voidInit>

	HEsp_voidConnectOnWifi("WE_9A2B93","k6m21723");
 80009b2:	4917      	ldr	r1, [pc, #92]	; (8000a10 <main+0xa8>)
 80009b4:	4817      	ldr	r0, [pc, #92]	; (8000a14 <main+0xac>)
 80009b6:	f7ff fc03 	bl	80001c0 <HEsp_voidConnectOnWifi>
	x:;
	HEsp_voidConnectOnServer("69.197.143.14");
 80009ba:	4817      	ldr	r0, [pc, #92]	; (8000a18 <main+0xb0>)
 80009bc:	f7ff fc3c 	bl	8000238 <HEsp_voidConnectOnServer>

	//GET http://ahmedarm.freevar.com/status.txt  =42 letter + enter & ctr(j) &enter=45
	u8 Data =HEsp_voidSendData(45,"ahmedarm.freevar.com");
 80009c0:	4916      	ldr	r1, [pc, #88]	; (8000a1c <main+0xb4>)
 80009c2:	202d      	movs	r0, #45	; 0x2d
 80009c4:	f7ff fc70 	bl	80002a8 <HEsp_voidSendData>
 80009c8:	4603      	mov	r3, r0
 80009ca:	71fb      	strb	r3, [r7, #7]
	while(1)
	{



		if (Data == 1)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d10a      	bne.n	80009e8 <main+0x80>
		{
			MGPIO_VoidSetPinValue(GPIOA,PIN1,HIGH);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2101      	movs	r1, #1
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff fe5e 	bl	8000698 <MGPIO_VoidSetPinValue>
			MGPIO_VoidSetPinValue(GPIOA,PIN0,LOW);
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff fe59 	bl	8000698 <MGPIO_VoidSetPinValue>
			goto x;
 80009e6:	e7e8      	b.n	80009ba <main+0x52>
		}
		else if (Data == 35)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b23      	cmp	r3, #35	; 0x23
 80009ec:	d10a      	bne.n	8000a04 <main+0x9c>
		{
			MGPIO_VoidSetPinValue(GPIOA,PIN1,LOW);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2101      	movs	r1, #1
 80009f2:	2000      	movs	r0, #0
 80009f4:	f7ff fe50 	bl	8000698 <MGPIO_VoidSetPinValue>
			MGPIO_VoidSetPinValue(GPIOA,PIN0,LOW);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	2000      	movs	r0, #0
 80009fe:	f7ff fe4b 	bl	8000698 <MGPIO_VoidSetPinValue>
			goto x;
 8000a02:	e7da      	b.n	80009ba <main+0x52>
		}
		else
		{
			MGPIO_VoidSetPinValue(GPIOA,PIN0,HIGH);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2100      	movs	r1, #0
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff fe45 	bl	8000698 <MGPIO_VoidSetPinValue>
			goto x;
 8000a0e:	e7d4      	b.n	80009ba <main+0x52>
 8000a10:	08001454 	.word	0x08001454
 8000a14:	08001460 	.word	0x08001460
 8000a18:	0800146c 	.word	0x0800146c
 8000a1c:	0800147c 	.word	0x0800147c

08000a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <_sbrk+0x5c>)
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <_sbrk+0x60>)
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <_sbrk+0x64>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <_sbrk+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d207      	bcs.n	8000a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a50:	f000 f846 	bl	8000ae0 <__errno>
 8000a54:	4603      	mov	r3, r0
 8000a56:	220c      	movs	r2, #12
 8000a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	e009      	b.n	8000a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <_sbrk+0x64>)
 8000a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20005000 	.word	0x20005000
 8000a80:	00000400 	.word	0x00000400
 8000a84:	2000008c 	.word	0x2000008c
 8000a88:	200000a8 	.word	0x200000a8

08000a8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a90:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <LoopForever+0xe>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aac:	4c0a      	ldr	r4, [pc, #40]	; (8000ad8 <LoopForever+0x16>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aba:	f000 f817 	bl	8000aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000abe:	f7ff ff53 	bl	8000968 <main>

08000ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac2:	e7fe      	b.n	8000ac2 <LoopForever>
  ldr   r0, =_estack
 8000ac4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ad0:	080014cc 	.word	0x080014cc
  ldr r2, =_sbss
 8000ad4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ad8:	200000a8 	.word	0x200000a8

08000adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_2_IRQHandler>
	...

08000ae0 <__errno>:
 8000ae0:	4b01      	ldr	r3, [pc, #4]	; (8000ae8 <__errno+0x8>)
 8000ae2:	6818      	ldr	r0, [r3, #0]
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000004 	.word	0x20000004

08000aec <__libc_init_array>:
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	2600      	movs	r6, #0
 8000af0:	4d0c      	ldr	r5, [pc, #48]	; (8000b24 <__libc_init_array+0x38>)
 8000af2:	4c0d      	ldr	r4, [pc, #52]	; (8000b28 <__libc_init_array+0x3c>)
 8000af4:	1b64      	subs	r4, r4, r5
 8000af6:	10a4      	asrs	r4, r4, #2
 8000af8:	42a6      	cmp	r6, r4
 8000afa:	d109      	bne.n	8000b10 <__libc_init_array+0x24>
 8000afc:	f000 fc5c 	bl	80013b8 <_init>
 8000b00:	2600      	movs	r6, #0
 8000b02:	4d0a      	ldr	r5, [pc, #40]	; (8000b2c <__libc_init_array+0x40>)
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <__libc_init_array+0x44>)
 8000b06:	1b64      	subs	r4, r4, r5
 8000b08:	10a4      	asrs	r4, r4, #2
 8000b0a:	42a6      	cmp	r6, r4
 8000b0c:	d105      	bne.n	8000b1a <__libc_init_array+0x2e>
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
 8000b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b14:	4798      	blx	r3
 8000b16:	3601      	adds	r6, #1
 8000b18:	e7ee      	b.n	8000af8 <__libc_init_array+0xc>
 8000b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b1e:	4798      	blx	r3
 8000b20:	3601      	adds	r6, #1
 8000b22:	e7f2      	b.n	8000b0a <__libc_init_array+0x1e>
 8000b24:	080014c4 	.word	0x080014c4
 8000b28:	080014c4 	.word	0x080014c4
 8000b2c:	080014c4 	.word	0x080014c4
 8000b30:	080014c8 	.word	0x080014c8

08000b34 <memset>:
 8000b34:	4603      	mov	r3, r0
 8000b36:	4402      	add	r2, r0
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d100      	bne.n	8000b3e <memset+0xa>
 8000b3c:	4770      	bx	lr
 8000b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8000b42:	e7f9      	b.n	8000b38 <memset+0x4>

08000b44 <siprintf>:
 8000b44:	b40e      	push	{r1, r2, r3}
 8000b46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000b4a:	b500      	push	{lr}
 8000b4c:	b09c      	sub	sp, #112	; 0x70
 8000b4e:	ab1d      	add	r3, sp, #116	; 0x74
 8000b50:	9002      	str	r0, [sp, #8]
 8000b52:	9006      	str	r0, [sp, #24]
 8000b54:	9107      	str	r1, [sp, #28]
 8000b56:	9104      	str	r1, [sp, #16]
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <siprintf+0x38>)
 8000b5a:	4909      	ldr	r1, [pc, #36]	; (8000b80 <siprintf+0x3c>)
 8000b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b60:	9105      	str	r1, [sp, #20]
 8000b62:	6800      	ldr	r0, [r0, #0]
 8000b64:	a902      	add	r1, sp, #8
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	f000 f868 	bl	8000c3c <_svfiprintf_r>
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	9b02      	ldr	r3, [sp, #8]
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	b01c      	add	sp, #112	; 0x70
 8000b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b78:	b003      	add	sp, #12
 8000b7a:	4770      	bx	lr
 8000b7c:	20000004 	.word	0x20000004
 8000b80:	ffff0208 	.word	0xffff0208

08000b84 <__ssputs_r>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	688e      	ldr	r6, [r1, #8]
 8000b8a:	4682      	mov	sl, r0
 8000b8c:	429e      	cmp	r6, r3
 8000b8e:	460c      	mov	r4, r1
 8000b90:	4690      	mov	r8, r2
 8000b92:	461f      	mov	r7, r3
 8000b94:	d838      	bhi.n	8000c08 <__ssputs_r+0x84>
 8000b96:	898a      	ldrh	r2, [r1, #12]
 8000b98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000b9c:	d032      	beq.n	8000c04 <__ssputs_r+0x80>
 8000b9e:	6825      	ldr	r5, [r4, #0]
 8000ba0:	6909      	ldr	r1, [r1, #16]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	eba5 0901 	sub.w	r9, r5, r1
 8000ba8:	6965      	ldr	r5, [r4, #20]
 8000baa:	444b      	add	r3, r9
 8000bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000bb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000bb4:	106d      	asrs	r5, r5, #1
 8000bb6:	429d      	cmp	r5, r3
 8000bb8:	bf38      	it	cc
 8000bba:	461d      	movcc	r5, r3
 8000bbc:	0553      	lsls	r3, r2, #21
 8000bbe:	d531      	bpl.n	8000c24 <__ssputs_r+0xa0>
 8000bc0:	4629      	mov	r1, r5
 8000bc2:	f000 fb53 	bl	800126c <_malloc_r>
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	b950      	cbnz	r0, 8000be0 <__ssputs_r+0x5c>
 8000bca:	230c      	movs	r3, #12
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f8ca 3000 	str.w	r3, [sl]
 8000bd4:	89a3      	ldrh	r3, [r4, #12]
 8000bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bda:	81a3      	strh	r3, [r4, #12]
 8000bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be0:	464a      	mov	r2, r9
 8000be2:	6921      	ldr	r1, [r4, #16]
 8000be4:	f000 face 	bl	8001184 <memcpy>
 8000be8:	89a3      	ldrh	r3, [r4, #12]
 8000bea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf2:	81a3      	strh	r3, [r4, #12]
 8000bf4:	6126      	str	r6, [r4, #16]
 8000bf6:	444e      	add	r6, r9
 8000bf8:	6026      	str	r6, [r4, #0]
 8000bfa:	463e      	mov	r6, r7
 8000bfc:	6165      	str	r5, [r4, #20]
 8000bfe:	eba5 0509 	sub.w	r5, r5, r9
 8000c02:	60a5      	str	r5, [r4, #8]
 8000c04:	42be      	cmp	r6, r7
 8000c06:	d900      	bls.n	8000c0a <__ssputs_r+0x86>
 8000c08:	463e      	mov	r6, r7
 8000c0a:	4632      	mov	r2, r6
 8000c0c:	4641      	mov	r1, r8
 8000c0e:	6820      	ldr	r0, [r4, #0]
 8000c10:	f000 fac6 	bl	80011a0 <memmove>
 8000c14:	68a3      	ldr	r3, [r4, #8]
 8000c16:	6822      	ldr	r2, [r4, #0]
 8000c18:	1b9b      	subs	r3, r3, r6
 8000c1a:	4432      	add	r2, r6
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	60a3      	str	r3, [r4, #8]
 8000c20:	6022      	str	r2, [r4, #0]
 8000c22:	e7db      	b.n	8000bdc <__ssputs_r+0x58>
 8000c24:	462a      	mov	r2, r5
 8000c26:	f000 fb7b 	bl	8001320 <_realloc_r>
 8000c2a:	4606      	mov	r6, r0
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d1e1      	bne.n	8000bf4 <__ssputs_r+0x70>
 8000c30:	4650      	mov	r0, sl
 8000c32:	6921      	ldr	r1, [r4, #16]
 8000c34:	f000 face 	bl	80011d4 <_free_r>
 8000c38:	e7c7      	b.n	8000bca <__ssputs_r+0x46>
	...

08000c3c <_svfiprintf_r>:
 8000c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c40:	4698      	mov	r8, r3
 8000c42:	898b      	ldrh	r3, [r1, #12]
 8000c44:	4607      	mov	r7, r0
 8000c46:	061b      	lsls	r3, r3, #24
 8000c48:	460d      	mov	r5, r1
 8000c4a:	4614      	mov	r4, r2
 8000c4c:	b09d      	sub	sp, #116	; 0x74
 8000c4e:	d50e      	bpl.n	8000c6e <_svfiprintf_r+0x32>
 8000c50:	690b      	ldr	r3, [r1, #16]
 8000c52:	b963      	cbnz	r3, 8000c6e <_svfiprintf_r+0x32>
 8000c54:	2140      	movs	r1, #64	; 0x40
 8000c56:	f000 fb09 	bl	800126c <_malloc_r>
 8000c5a:	6028      	str	r0, [r5, #0]
 8000c5c:	6128      	str	r0, [r5, #16]
 8000c5e:	b920      	cbnz	r0, 8000c6a <_svfiprintf_r+0x2e>
 8000c60:	230c      	movs	r3, #12
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	e0d1      	b.n	8000e0e <_svfiprintf_r+0x1d2>
 8000c6a:	2340      	movs	r3, #64	; 0x40
 8000c6c:	616b      	str	r3, [r5, #20]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	9309      	str	r3, [sp, #36]	; 0x24
 8000c72:	2320      	movs	r3, #32
 8000c74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c78:	2330      	movs	r3, #48	; 0x30
 8000c7a:	f04f 0901 	mov.w	r9, #1
 8000c7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000e28 <_svfiprintf_r+0x1ec>
 8000c86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	469a      	mov	sl, r3
 8000c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c92:	b10a      	cbz	r2, 8000c98 <_svfiprintf_r+0x5c>
 8000c94:	2a25      	cmp	r2, #37	; 0x25
 8000c96:	d1f9      	bne.n	8000c8c <_svfiprintf_r+0x50>
 8000c98:	ebba 0b04 	subs.w	fp, sl, r4
 8000c9c:	d00b      	beq.n	8000cb6 <_svfiprintf_r+0x7a>
 8000c9e:	465b      	mov	r3, fp
 8000ca0:	4622      	mov	r2, r4
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	4638      	mov	r0, r7
 8000ca6:	f7ff ff6d 	bl	8000b84 <__ssputs_r>
 8000caa:	3001      	adds	r0, #1
 8000cac:	f000 80aa 	beq.w	8000e04 <_svfiprintf_r+0x1c8>
 8000cb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cb2:	445a      	add	r2, fp
 8000cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8000cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80a2 	beq.w	8000e04 <_svfiprintf_r+0x1c8>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cca:	f10a 0a01 	add.w	sl, sl, #1
 8000cce:	9304      	str	r3, [sp, #16]
 8000cd0:	9307      	str	r3, [sp, #28]
 8000cd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000cd6:	931a      	str	r3, [sp, #104]	; 0x68
 8000cd8:	4654      	mov	r4, sl
 8000cda:	2205      	movs	r2, #5
 8000cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ce0:	4851      	ldr	r0, [pc, #324]	; (8000e28 <_svfiprintf_r+0x1ec>)
 8000ce2:	f000 fa41 	bl	8001168 <memchr>
 8000ce6:	9a04      	ldr	r2, [sp, #16]
 8000ce8:	b9d8      	cbnz	r0, 8000d22 <_svfiprintf_r+0xe6>
 8000cea:	06d0      	lsls	r0, r2, #27
 8000cec:	bf44      	itt	mi
 8000cee:	2320      	movmi	r3, #32
 8000cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000cf4:	0711      	lsls	r1, r2, #28
 8000cf6:	bf44      	itt	mi
 8000cf8:	232b      	movmi	r3, #43	; 0x2b
 8000cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8000d02:	2b2a      	cmp	r3, #42	; 0x2a
 8000d04:	d015      	beq.n	8000d32 <_svfiprintf_r+0xf6>
 8000d06:	4654      	mov	r4, sl
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f04f 0c0a 	mov.w	ip, #10
 8000d0e:	9a07      	ldr	r2, [sp, #28]
 8000d10:	4621      	mov	r1, r4
 8000d12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d16:	3b30      	subs	r3, #48	; 0x30
 8000d18:	2b09      	cmp	r3, #9
 8000d1a:	d94e      	bls.n	8000dba <_svfiprintf_r+0x17e>
 8000d1c:	b1b0      	cbz	r0, 8000d4c <_svfiprintf_r+0x110>
 8000d1e:	9207      	str	r2, [sp, #28]
 8000d20:	e014      	b.n	8000d4c <_svfiprintf_r+0x110>
 8000d22:	eba0 0308 	sub.w	r3, r0, r8
 8000d26:	fa09 f303 	lsl.w	r3, r9, r3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	46a2      	mov	sl, r4
 8000d2e:	9304      	str	r3, [sp, #16]
 8000d30:	e7d2      	b.n	8000cd8 <_svfiprintf_r+0x9c>
 8000d32:	9b03      	ldr	r3, [sp, #12]
 8000d34:	1d19      	adds	r1, r3, #4
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	9103      	str	r1, [sp, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	bfbb      	ittet	lt
 8000d3e:	425b      	neglt	r3, r3
 8000d40:	f042 0202 	orrlt.w	r2, r2, #2
 8000d44:	9307      	strge	r3, [sp, #28]
 8000d46:	9307      	strlt	r3, [sp, #28]
 8000d48:	bfb8      	it	lt
 8000d4a:	9204      	strlt	r2, [sp, #16]
 8000d4c:	7823      	ldrb	r3, [r4, #0]
 8000d4e:	2b2e      	cmp	r3, #46	; 0x2e
 8000d50:	d10c      	bne.n	8000d6c <_svfiprintf_r+0x130>
 8000d52:	7863      	ldrb	r3, [r4, #1]
 8000d54:	2b2a      	cmp	r3, #42	; 0x2a
 8000d56:	d135      	bne.n	8000dc4 <_svfiprintf_r+0x188>
 8000d58:	9b03      	ldr	r3, [sp, #12]
 8000d5a:	3402      	adds	r4, #2
 8000d5c:	1d1a      	adds	r2, r3, #4
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	9203      	str	r2, [sp, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bfb8      	it	lt
 8000d66:	f04f 33ff 	movlt.w	r3, #4294967295
 8000d6a:	9305      	str	r3, [sp, #20]
 8000d6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000e38 <_svfiprintf_r+0x1fc>
 8000d70:	2203      	movs	r2, #3
 8000d72:	4650      	mov	r0, sl
 8000d74:	7821      	ldrb	r1, [r4, #0]
 8000d76:	f000 f9f7 	bl	8001168 <memchr>
 8000d7a:	b140      	cbz	r0, 8000d8e <_svfiprintf_r+0x152>
 8000d7c:	2340      	movs	r3, #64	; 0x40
 8000d7e:	eba0 000a 	sub.w	r0, r0, sl
 8000d82:	fa03 f000 	lsl.w	r0, r3, r0
 8000d86:	9b04      	ldr	r3, [sp, #16]
 8000d88:	3401      	adds	r4, #1
 8000d8a:	4303      	orrs	r3, r0
 8000d8c:	9304      	str	r3, [sp, #16]
 8000d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d92:	2206      	movs	r2, #6
 8000d94:	4825      	ldr	r0, [pc, #148]	; (8000e2c <_svfiprintf_r+0x1f0>)
 8000d96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d9a:	f000 f9e5 	bl	8001168 <memchr>
 8000d9e:	2800      	cmp	r0, #0
 8000da0:	d038      	beq.n	8000e14 <_svfiprintf_r+0x1d8>
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <_svfiprintf_r+0x1f4>)
 8000da4:	bb1b      	cbnz	r3, 8000dee <_svfiprintf_r+0x1b2>
 8000da6:	9b03      	ldr	r3, [sp, #12]
 8000da8:	3307      	adds	r3, #7
 8000daa:	f023 0307 	bic.w	r3, r3, #7
 8000dae:	3308      	adds	r3, #8
 8000db0:	9303      	str	r3, [sp, #12]
 8000db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000db4:	4433      	add	r3, r6
 8000db6:	9309      	str	r3, [sp, #36]	; 0x24
 8000db8:	e767      	b.n	8000c8a <_svfiprintf_r+0x4e>
 8000dba:	460c      	mov	r4, r1
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dc2:	e7a5      	b.n	8000d10 <_svfiprintf_r+0xd4>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f04f 0c0a 	mov.w	ip, #10
 8000dca:	4619      	mov	r1, r3
 8000dcc:	3401      	adds	r4, #1
 8000dce:	9305      	str	r3, [sp, #20]
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dd6:	3a30      	subs	r2, #48	; 0x30
 8000dd8:	2a09      	cmp	r2, #9
 8000dda:	d903      	bls.n	8000de4 <_svfiprintf_r+0x1a8>
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0c5      	beq.n	8000d6c <_svfiprintf_r+0x130>
 8000de0:	9105      	str	r1, [sp, #20]
 8000de2:	e7c3      	b.n	8000d6c <_svfiprintf_r+0x130>
 8000de4:	4604      	mov	r4, r0
 8000de6:	2301      	movs	r3, #1
 8000de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000dec:	e7f0      	b.n	8000dd0 <_svfiprintf_r+0x194>
 8000dee:	ab03      	add	r3, sp, #12
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	462a      	mov	r2, r5
 8000df4:	4638      	mov	r0, r7
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <_svfiprintf_r+0x1f8>)
 8000df8:	a904      	add	r1, sp, #16
 8000dfa:	f3af 8000 	nop.w
 8000dfe:	1c42      	adds	r2, r0, #1
 8000e00:	4606      	mov	r6, r0
 8000e02:	d1d6      	bne.n	8000db2 <_svfiprintf_r+0x176>
 8000e04:	89ab      	ldrh	r3, [r5, #12]
 8000e06:	065b      	lsls	r3, r3, #25
 8000e08:	f53f af2c 	bmi.w	8000c64 <_svfiprintf_r+0x28>
 8000e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e0e:	b01d      	add	sp, #116	; 0x74
 8000e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e14:	ab03      	add	r3, sp, #12
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	462a      	mov	r2, r5
 8000e1a:	4638      	mov	r0, r7
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <_svfiprintf_r+0x1f8>)
 8000e1e:	a904      	add	r1, sp, #16
 8000e20:	f000 f87c 	bl	8000f1c <_printf_i>
 8000e24:	e7eb      	b.n	8000dfe <_svfiprintf_r+0x1c2>
 8000e26:	bf00      	nop
 8000e28:	08001491 	.word	0x08001491
 8000e2c:	0800149b 	.word	0x0800149b
 8000e30:	00000000 	.word	0x00000000
 8000e34:	08000b85 	.word	0x08000b85
 8000e38:	08001497 	.word	0x08001497

08000e3c <_printf_common>:
 8000e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e40:	4616      	mov	r6, r2
 8000e42:	4699      	mov	r9, r3
 8000e44:	688a      	ldr	r2, [r1, #8]
 8000e46:	690b      	ldr	r3, [r1, #16]
 8000e48:	4607      	mov	r7, r0
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	bfb8      	it	lt
 8000e4e:	4613      	movlt	r3, r2
 8000e50:	6033      	str	r3, [r6, #0]
 8000e52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e56:	460c      	mov	r4, r1
 8000e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e5c:	b10a      	cbz	r2, 8000e62 <_printf_common+0x26>
 8000e5e:	3301      	adds	r3, #1
 8000e60:	6033      	str	r3, [r6, #0]
 8000e62:	6823      	ldr	r3, [r4, #0]
 8000e64:	0699      	lsls	r1, r3, #26
 8000e66:	bf42      	ittt	mi
 8000e68:	6833      	ldrmi	r3, [r6, #0]
 8000e6a:	3302      	addmi	r3, #2
 8000e6c:	6033      	strmi	r3, [r6, #0]
 8000e6e:	6825      	ldr	r5, [r4, #0]
 8000e70:	f015 0506 	ands.w	r5, r5, #6
 8000e74:	d106      	bne.n	8000e84 <_printf_common+0x48>
 8000e76:	f104 0a19 	add.w	sl, r4, #25
 8000e7a:	68e3      	ldr	r3, [r4, #12]
 8000e7c:	6832      	ldr	r2, [r6, #0]
 8000e7e:	1a9b      	subs	r3, r3, r2
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	dc28      	bgt.n	8000ed6 <_printf_common+0x9a>
 8000e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e88:	1e13      	subs	r3, r2, #0
 8000e8a:	6822      	ldr	r2, [r4, #0]
 8000e8c:	bf18      	it	ne
 8000e8e:	2301      	movne	r3, #1
 8000e90:	0692      	lsls	r2, r2, #26
 8000e92:	d42d      	bmi.n	8000ef0 <_printf_common+0xb4>
 8000e94:	4649      	mov	r1, r9
 8000e96:	4638      	mov	r0, r7
 8000e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e9c:	47c0      	blx	r8
 8000e9e:	3001      	adds	r0, #1
 8000ea0:	d020      	beq.n	8000ee4 <_printf_common+0xa8>
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	68e5      	ldr	r5, [r4, #12]
 8000ea6:	f003 0306 	and.w	r3, r3, #6
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf18      	it	ne
 8000eae:	2500      	movne	r5, #0
 8000eb0:	6832      	ldr	r2, [r6, #0]
 8000eb2:	f04f 0600 	mov.w	r6, #0
 8000eb6:	68a3      	ldr	r3, [r4, #8]
 8000eb8:	bf08      	it	eq
 8000eba:	1aad      	subeq	r5, r5, r2
 8000ebc:	6922      	ldr	r2, [r4, #16]
 8000ebe:	bf08      	it	eq
 8000ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	bfc4      	itt	gt
 8000ec8:	1a9b      	subgt	r3, r3, r2
 8000eca:	18ed      	addgt	r5, r5, r3
 8000ecc:	341a      	adds	r4, #26
 8000ece:	42b5      	cmp	r5, r6
 8000ed0:	d11a      	bne.n	8000f08 <_printf_common+0xcc>
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	e008      	b.n	8000ee8 <_printf_common+0xac>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	4652      	mov	r2, sl
 8000eda:	4649      	mov	r1, r9
 8000edc:	4638      	mov	r0, r7
 8000ede:	47c0      	blx	r8
 8000ee0:	3001      	adds	r0, #1
 8000ee2:	d103      	bne.n	8000eec <_printf_common+0xb0>
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eec:	3501      	adds	r5, #1
 8000eee:	e7c4      	b.n	8000e7a <_printf_common+0x3e>
 8000ef0:	2030      	movs	r0, #48	; 0x30
 8000ef2:	18e1      	adds	r1, r4, r3
 8000ef4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000efe:	4422      	add	r2, r4
 8000f00:	3302      	adds	r3, #2
 8000f02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f06:	e7c5      	b.n	8000e94 <_printf_common+0x58>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	4622      	mov	r2, r4
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	4638      	mov	r0, r7
 8000f10:	47c0      	blx	r8
 8000f12:	3001      	adds	r0, #1
 8000f14:	d0e6      	beq.n	8000ee4 <_printf_common+0xa8>
 8000f16:	3601      	adds	r6, #1
 8000f18:	e7d9      	b.n	8000ece <_printf_common+0x92>
	...

08000f1c <_printf_i>:
 8000f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f20:	460c      	mov	r4, r1
 8000f22:	7e27      	ldrb	r7, [r4, #24]
 8000f24:	4691      	mov	r9, r2
 8000f26:	2f78      	cmp	r7, #120	; 0x78
 8000f28:	4680      	mov	r8, r0
 8000f2a:	469a      	mov	sl, r3
 8000f2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000f2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f32:	d807      	bhi.n	8000f44 <_printf_i+0x28>
 8000f34:	2f62      	cmp	r7, #98	; 0x62
 8000f36:	d80a      	bhi.n	8000f4e <_printf_i+0x32>
 8000f38:	2f00      	cmp	r7, #0
 8000f3a:	f000 80d9 	beq.w	80010f0 <_printf_i+0x1d4>
 8000f3e:	2f58      	cmp	r7, #88	; 0x58
 8000f40:	f000 80a4 	beq.w	800108c <_printf_i+0x170>
 8000f44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f4c:	e03a      	b.n	8000fc4 <_printf_i+0xa8>
 8000f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f52:	2b15      	cmp	r3, #21
 8000f54:	d8f6      	bhi.n	8000f44 <_printf_i+0x28>
 8000f56:	a001      	add	r0, pc, #4	; (adr r0, 8000f5c <_printf_i+0x40>)
 8000f58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000f5c:	08000fb5 	.word	0x08000fb5
 8000f60:	08000fc9 	.word	0x08000fc9
 8000f64:	08000f45 	.word	0x08000f45
 8000f68:	08000f45 	.word	0x08000f45
 8000f6c:	08000f45 	.word	0x08000f45
 8000f70:	08000f45 	.word	0x08000f45
 8000f74:	08000fc9 	.word	0x08000fc9
 8000f78:	08000f45 	.word	0x08000f45
 8000f7c:	08000f45 	.word	0x08000f45
 8000f80:	08000f45 	.word	0x08000f45
 8000f84:	08000f45 	.word	0x08000f45
 8000f88:	080010d7 	.word	0x080010d7
 8000f8c:	08000ff9 	.word	0x08000ff9
 8000f90:	080010b9 	.word	0x080010b9
 8000f94:	08000f45 	.word	0x08000f45
 8000f98:	08000f45 	.word	0x08000f45
 8000f9c:	080010f9 	.word	0x080010f9
 8000fa0:	08000f45 	.word	0x08000f45
 8000fa4:	08000ff9 	.word	0x08000ff9
 8000fa8:	08000f45 	.word	0x08000f45
 8000fac:	08000f45 	.word	0x08000f45
 8000fb0:	080010c1 	.word	0x080010c1
 8000fb4:	680b      	ldr	r3, [r1, #0]
 8000fb6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000fba:	1d1a      	adds	r2, r3, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	600a      	str	r2, [r1, #0]
 8000fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e0a4      	b.n	8001112 <_printf_i+0x1f6>
 8000fc8:	6825      	ldr	r5, [r4, #0]
 8000fca:	6808      	ldr	r0, [r1, #0]
 8000fcc:	062e      	lsls	r6, r5, #24
 8000fce:	f100 0304 	add.w	r3, r0, #4
 8000fd2:	d50a      	bpl.n	8000fea <_printf_i+0xce>
 8000fd4:	6805      	ldr	r5, [r0, #0]
 8000fd6:	600b      	str	r3, [r1, #0]
 8000fd8:	2d00      	cmp	r5, #0
 8000fda:	da03      	bge.n	8000fe4 <_printf_i+0xc8>
 8000fdc:	232d      	movs	r3, #45	; 0x2d
 8000fde:	426d      	negs	r5, r5
 8000fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fe4:	230a      	movs	r3, #10
 8000fe6:	485e      	ldr	r0, [pc, #376]	; (8001160 <_printf_i+0x244>)
 8000fe8:	e019      	b.n	800101e <_printf_i+0x102>
 8000fea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000fee:	6805      	ldr	r5, [r0, #0]
 8000ff0:	600b      	str	r3, [r1, #0]
 8000ff2:	bf18      	it	ne
 8000ff4:	b22d      	sxthne	r5, r5
 8000ff6:	e7ef      	b.n	8000fd8 <_printf_i+0xbc>
 8000ff8:	680b      	ldr	r3, [r1, #0]
 8000ffa:	6825      	ldr	r5, [r4, #0]
 8000ffc:	1d18      	adds	r0, r3, #4
 8000ffe:	6008      	str	r0, [r1, #0]
 8001000:	0628      	lsls	r0, r5, #24
 8001002:	d501      	bpl.n	8001008 <_printf_i+0xec>
 8001004:	681d      	ldr	r5, [r3, #0]
 8001006:	e002      	b.n	800100e <_printf_i+0xf2>
 8001008:	0669      	lsls	r1, r5, #25
 800100a:	d5fb      	bpl.n	8001004 <_printf_i+0xe8>
 800100c:	881d      	ldrh	r5, [r3, #0]
 800100e:	2f6f      	cmp	r7, #111	; 0x6f
 8001010:	bf0c      	ite	eq
 8001012:	2308      	moveq	r3, #8
 8001014:	230a      	movne	r3, #10
 8001016:	4852      	ldr	r0, [pc, #328]	; (8001160 <_printf_i+0x244>)
 8001018:	2100      	movs	r1, #0
 800101a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800101e:	6866      	ldr	r6, [r4, #4]
 8001020:	2e00      	cmp	r6, #0
 8001022:	bfa8      	it	ge
 8001024:	6821      	ldrge	r1, [r4, #0]
 8001026:	60a6      	str	r6, [r4, #8]
 8001028:	bfa4      	itt	ge
 800102a:	f021 0104 	bicge.w	r1, r1, #4
 800102e:	6021      	strge	r1, [r4, #0]
 8001030:	b90d      	cbnz	r5, 8001036 <_printf_i+0x11a>
 8001032:	2e00      	cmp	r6, #0
 8001034:	d04d      	beq.n	80010d2 <_printf_i+0x1b6>
 8001036:	4616      	mov	r6, r2
 8001038:	fbb5 f1f3 	udiv	r1, r5, r3
 800103c:	fb03 5711 	mls	r7, r3, r1, r5
 8001040:	5dc7      	ldrb	r7, [r0, r7]
 8001042:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001046:	462f      	mov	r7, r5
 8001048:	42bb      	cmp	r3, r7
 800104a:	460d      	mov	r5, r1
 800104c:	d9f4      	bls.n	8001038 <_printf_i+0x11c>
 800104e:	2b08      	cmp	r3, #8
 8001050:	d10b      	bne.n	800106a <_printf_i+0x14e>
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	07df      	lsls	r7, r3, #31
 8001056:	d508      	bpl.n	800106a <_printf_i+0x14e>
 8001058:	6923      	ldr	r3, [r4, #16]
 800105a:	6861      	ldr	r1, [r4, #4]
 800105c:	4299      	cmp	r1, r3
 800105e:	bfde      	ittt	le
 8001060:	2330      	movle	r3, #48	; 0x30
 8001062:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001066:	f106 36ff 	addle.w	r6, r6, #4294967295
 800106a:	1b92      	subs	r2, r2, r6
 800106c:	6122      	str	r2, [r4, #16]
 800106e:	464b      	mov	r3, r9
 8001070:	4621      	mov	r1, r4
 8001072:	4640      	mov	r0, r8
 8001074:	f8cd a000 	str.w	sl, [sp]
 8001078:	aa03      	add	r2, sp, #12
 800107a:	f7ff fedf 	bl	8000e3c <_printf_common>
 800107e:	3001      	adds	r0, #1
 8001080:	d14c      	bne.n	800111c <_printf_i+0x200>
 8001082:	f04f 30ff 	mov.w	r0, #4294967295
 8001086:	b004      	add	sp, #16
 8001088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108c:	4834      	ldr	r0, [pc, #208]	; (8001160 <_printf_i+0x244>)
 800108e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001092:	680e      	ldr	r6, [r1, #0]
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	f856 5b04 	ldr.w	r5, [r6], #4
 800109a:	061f      	lsls	r7, r3, #24
 800109c:	600e      	str	r6, [r1, #0]
 800109e:	d514      	bpl.n	80010ca <_printf_i+0x1ae>
 80010a0:	07d9      	lsls	r1, r3, #31
 80010a2:	bf44      	itt	mi
 80010a4:	f043 0320 	orrmi.w	r3, r3, #32
 80010a8:	6023      	strmi	r3, [r4, #0]
 80010aa:	b91d      	cbnz	r5, 80010b4 <_printf_i+0x198>
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	f023 0320 	bic.w	r3, r3, #32
 80010b2:	6023      	str	r3, [r4, #0]
 80010b4:	2310      	movs	r3, #16
 80010b6:	e7af      	b.n	8001018 <_printf_i+0xfc>
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	f043 0320 	orr.w	r3, r3, #32
 80010be:	6023      	str	r3, [r4, #0]
 80010c0:	2378      	movs	r3, #120	; 0x78
 80010c2:	4828      	ldr	r0, [pc, #160]	; (8001164 <_printf_i+0x248>)
 80010c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80010c8:	e7e3      	b.n	8001092 <_printf_i+0x176>
 80010ca:	065e      	lsls	r6, r3, #25
 80010cc:	bf48      	it	mi
 80010ce:	b2ad      	uxthmi	r5, r5
 80010d0:	e7e6      	b.n	80010a0 <_printf_i+0x184>
 80010d2:	4616      	mov	r6, r2
 80010d4:	e7bb      	b.n	800104e <_printf_i+0x132>
 80010d6:	680b      	ldr	r3, [r1, #0]
 80010d8:	6826      	ldr	r6, [r4, #0]
 80010da:	1d1d      	adds	r5, r3, #4
 80010dc:	6960      	ldr	r0, [r4, #20]
 80010de:	600d      	str	r5, [r1, #0]
 80010e0:	0635      	lsls	r5, r6, #24
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	d501      	bpl.n	80010ea <_printf_i+0x1ce>
 80010e6:	6018      	str	r0, [r3, #0]
 80010e8:	e002      	b.n	80010f0 <_printf_i+0x1d4>
 80010ea:	0671      	lsls	r1, r6, #25
 80010ec:	d5fb      	bpl.n	80010e6 <_printf_i+0x1ca>
 80010ee:	8018      	strh	r0, [r3, #0]
 80010f0:	2300      	movs	r3, #0
 80010f2:	4616      	mov	r6, r2
 80010f4:	6123      	str	r3, [r4, #16]
 80010f6:	e7ba      	b.n	800106e <_printf_i+0x152>
 80010f8:	680b      	ldr	r3, [r1, #0]
 80010fa:	1d1a      	adds	r2, r3, #4
 80010fc:	600a      	str	r2, [r1, #0]
 80010fe:	681e      	ldr	r6, [r3, #0]
 8001100:	2100      	movs	r1, #0
 8001102:	4630      	mov	r0, r6
 8001104:	6862      	ldr	r2, [r4, #4]
 8001106:	f000 f82f 	bl	8001168 <memchr>
 800110a:	b108      	cbz	r0, 8001110 <_printf_i+0x1f4>
 800110c:	1b80      	subs	r0, r0, r6
 800110e:	6060      	str	r0, [r4, #4]
 8001110:	6863      	ldr	r3, [r4, #4]
 8001112:	6123      	str	r3, [r4, #16]
 8001114:	2300      	movs	r3, #0
 8001116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800111a:	e7a8      	b.n	800106e <_printf_i+0x152>
 800111c:	4632      	mov	r2, r6
 800111e:	4649      	mov	r1, r9
 8001120:	4640      	mov	r0, r8
 8001122:	6923      	ldr	r3, [r4, #16]
 8001124:	47d0      	blx	sl
 8001126:	3001      	adds	r0, #1
 8001128:	d0ab      	beq.n	8001082 <_printf_i+0x166>
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	079b      	lsls	r3, r3, #30
 800112e:	d413      	bmi.n	8001158 <_printf_i+0x23c>
 8001130:	68e0      	ldr	r0, [r4, #12]
 8001132:	9b03      	ldr	r3, [sp, #12]
 8001134:	4298      	cmp	r0, r3
 8001136:	bfb8      	it	lt
 8001138:	4618      	movlt	r0, r3
 800113a:	e7a4      	b.n	8001086 <_printf_i+0x16a>
 800113c:	2301      	movs	r3, #1
 800113e:	4632      	mov	r2, r6
 8001140:	4649      	mov	r1, r9
 8001142:	4640      	mov	r0, r8
 8001144:	47d0      	blx	sl
 8001146:	3001      	adds	r0, #1
 8001148:	d09b      	beq.n	8001082 <_printf_i+0x166>
 800114a:	3501      	adds	r5, #1
 800114c:	68e3      	ldr	r3, [r4, #12]
 800114e:	9903      	ldr	r1, [sp, #12]
 8001150:	1a5b      	subs	r3, r3, r1
 8001152:	42ab      	cmp	r3, r5
 8001154:	dcf2      	bgt.n	800113c <_printf_i+0x220>
 8001156:	e7eb      	b.n	8001130 <_printf_i+0x214>
 8001158:	2500      	movs	r5, #0
 800115a:	f104 0619 	add.w	r6, r4, #25
 800115e:	e7f5      	b.n	800114c <_printf_i+0x230>
 8001160:	080014a2 	.word	0x080014a2
 8001164:	080014b3 	.word	0x080014b3

08001168 <memchr>:
 8001168:	4603      	mov	r3, r0
 800116a:	b510      	push	{r4, lr}
 800116c:	b2c9      	uxtb	r1, r1
 800116e:	4402      	add	r2, r0
 8001170:	4293      	cmp	r3, r2
 8001172:	4618      	mov	r0, r3
 8001174:	d101      	bne.n	800117a <memchr+0x12>
 8001176:	2000      	movs	r0, #0
 8001178:	e003      	b.n	8001182 <memchr+0x1a>
 800117a:	7804      	ldrb	r4, [r0, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	428c      	cmp	r4, r1
 8001180:	d1f6      	bne.n	8001170 <memchr+0x8>
 8001182:	bd10      	pop	{r4, pc}

08001184 <memcpy>:
 8001184:	440a      	add	r2, r1
 8001186:	4291      	cmp	r1, r2
 8001188:	f100 33ff 	add.w	r3, r0, #4294967295
 800118c:	d100      	bne.n	8001190 <memcpy+0xc>
 800118e:	4770      	bx	lr
 8001190:	b510      	push	{r4, lr}
 8001192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001196:	4291      	cmp	r1, r2
 8001198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800119c:	d1f9      	bne.n	8001192 <memcpy+0xe>
 800119e:	bd10      	pop	{r4, pc}

080011a0 <memmove>:
 80011a0:	4288      	cmp	r0, r1
 80011a2:	b510      	push	{r4, lr}
 80011a4:	eb01 0402 	add.w	r4, r1, r2
 80011a8:	d902      	bls.n	80011b0 <memmove+0x10>
 80011aa:	4284      	cmp	r4, r0
 80011ac:	4623      	mov	r3, r4
 80011ae:	d807      	bhi.n	80011c0 <memmove+0x20>
 80011b0:	1e43      	subs	r3, r0, #1
 80011b2:	42a1      	cmp	r1, r4
 80011b4:	d008      	beq.n	80011c8 <memmove+0x28>
 80011b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80011ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80011be:	e7f8      	b.n	80011b2 <memmove+0x12>
 80011c0:	4601      	mov	r1, r0
 80011c2:	4402      	add	r2, r0
 80011c4:	428a      	cmp	r2, r1
 80011c6:	d100      	bne.n	80011ca <memmove+0x2a>
 80011c8:	bd10      	pop	{r4, pc}
 80011ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80011ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80011d2:	e7f7      	b.n	80011c4 <memmove+0x24>

080011d4 <_free_r>:
 80011d4:	b538      	push	{r3, r4, r5, lr}
 80011d6:	4605      	mov	r5, r0
 80011d8:	2900      	cmp	r1, #0
 80011da:	d043      	beq.n	8001264 <_free_r+0x90>
 80011dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011e0:	1f0c      	subs	r4, r1, #4
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bfb8      	it	lt
 80011e6:	18e4      	addlt	r4, r4, r3
 80011e8:	f000 f8d0 	bl	800138c <__malloc_lock>
 80011ec:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <_free_r+0x94>)
 80011ee:	6813      	ldr	r3, [r2, #0]
 80011f0:	4610      	mov	r0, r2
 80011f2:	b933      	cbnz	r3, 8001202 <_free_r+0x2e>
 80011f4:	6063      	str	r3, [r4, #4]
 80011f6:	6014      	str	r4, [r2, #0]
 80011f8:	4628      	mov	r0, r5
 80011fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011fe:	f000 b8cb 	b.w	8001398 <__malloc_unlock>
 8001202:	42a3      	cmp	r3, r4
 8001204:	d90a      	bls.n	800121c <_free_r+0x48>
 8001206:	6821      	ldr	r1, [r4, #0]
 8001208:	1862      	adds	r2, r4, r1
 800120a:	4293      	cmp	r3, r2
 800120c:	bf01      	itttt	eq
 800120e:	681a      	ldreq	r2, [r3, #0]
 8001210:	685b      	ldreq	r3, [r3, #4]
 8001212:	1852      	addeq	r2, r2, r1
 8001214:	6022      	streq	r2, [r4, #0]
 8001216:	6063      	str	r3, [r4, #4]
 8001218:	6004      	str	r4, [r0, #0]
 800121a:	e7ed      	b.n	80011f8 <_free_r+0x24>
 800121c:	461a      	mov	r2, r3
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	b10b      	cbz	r3, 8001226 <_free_r+0x52>
 8001222:	42a3      	cmp	r3, r4
 8001224:	d9fa      	bls.n	800121c <_free_r+0x48>
 8001226:	6811      	ldr	r1, [r2, #0]
 8001228:	1850      	adds	r0, r2, r1
 800122a:	42a0      	cmp	r0, r4
 800122c:	d10b      	bne.n	8001246 <_free_r+0x72>
 800122e:	6820      	ldr	r0, [r4, #0]
 8001230:	4401      	add	r1, r0
 8001232:	1850      	adds	r0, r2, r1
 8001234:	4283      	cmp	r3, r0
 8001236:	6011      	str	r1, [r2, #0]
 8001238:	d1de      	bne.n	80011f8 <_free_r+0x24>
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4401      	add	r1, r0
 8001240:	6011      	str	r1, [r2, #0]
 8001242:	6053      	str	r3, [r2, #4]
 8001244:	e7d8      	b.n	80011f8 <_free_r+0x24>
 8001246:	d902      	bls.n	800124e <_free_r+0x7a>
 8001248:	230c      	movs	r3, #12
 800124a:	602b      	str	r3, [r5, #0]
 800124c:	e7d4      	b.n	80011f8 <_free_r+0x24>
 800124e:	6820      	ldr	r0, [r4, #0]
 8001250:	1821      	adds	r1, r4, r0
 8001252:	428b      	cmp	r3, r1
 8001254:	bf01      	itttt	eq
 8001256:	6819      	ldreq	r1, [r3, #0]
 8001258:	685b      	ldreq	r3, [r3, #4]
 800125a:	1809      	addeq	r1, r1, r0
 800125c:	6021      	streq	r1, [r4, #0]
 800125e:	6063      	str	r3, [r4, #4]
 8001260:	6054      	str	r4, [r2, #4]
 8001262:	e7c9      	b.n	80011f8 <_free_r+0x24>
 8001264:	bd38      	pop	{r3, r4, r5, pc}
 8001266:	bf00      	nop
 8001268:	20000090 	.word	0x20000090

0800126c <_malloc_r>:
 800126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126e:	1ccd      	adds	r5, r1, #3
 8001270:	f025 0503 	bic.w	r5, r5, #3
 8001274:	3508      	adds	r5, #8
 8001276:	2d0c      	cmp	r5, #12
 8001278:	bf38      	it	cc
 800127a:	250c      	movcc	r5, #12
 800127c:	2d00      	cmp	r5, #0
 800127e:	4606      	mov	r6, r0
 8001280:	db01      	blt.n	8001286 <_malloc_r+0x1a>
 8001282:	42a9      	cmp	r1, r5
 8001284:	d903      	bls.n	800128e <_malloc_r+0x22>
 8001286:	230c      	movs	r3, #12
 8001288:	6033      	str	r3, [r6, #0]
 800128a:	2000      	movs	r0, #0
 800128c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800128e:	f000 f87d 	bl	800138c <__malloc_lock>
 8001292:	4921      	ldr	r1, [pc, #132]	; (8001318 <_malloc_r+0xac>)
 8001294:	680a      	ldr	r2, [r1, #0]
 8001296:	4614      	mov	r4, r2
 8001298:	b99c      	cbnz	r4, 80012c2 <_malloc_r+0x56>
 800129a:	4f20      	ldr	r7, [pc, #128]	; (800131c <_malloc_r+0xb0>)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b923      	cbnz	r3, 80012aa <_malloc_r+0x3e>
 80012a0:	4621      	mov	r1, r4
 80012a2:	4630      	mov	r0, r6
 80012a4:	f000 f862 	bl	800136c <_sbrk_r>
 80012a8:	6038      	str	r0, [r7, #0]
 80012aa:	4629      	mov	r1, r5
 80012ac:	4630      	mov	r0, r6
 80012ae:	f000 f85d 	bl	800136c <_sbrk_r>
 80012b2:	1c43      	adds	r3, r0, #1
 80012b4:	d123      	bne.n	80012fe <_malloc_r+0x92>
 80012b6:	230c      	movs	r3, #12
 80012b8:	4630      	mov	r0, r6
 80012ba:	6033      	str	r3, [r6, #0]
 80012bc:	f000 f86c 	bl	8001398 <__malloc_unlock>
 80012c0:	e7e3      	b.n	800128a <_malloc_r+0x1e>
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	1b5b      	subs	r3, r3, r5
 80012c6:	d417      	bmi.n	80012f8 <_malloc_r+0x8c>
 80012c8:	2b0b      	cmp	r3, #11
 80012ca:	d903      	bls.n	80012d4 <_malloc_r+0x68>
 80012cc:	6023      	str	r3, [r4, #0]
 80012ce:	441c      	add	r4, r3
 80012d0:	6025      	str	r5, [r4, #0]
 80012d2:	e004      	b.n	80012de <_malloc_r+0x72>
 80012d4:	6863      	ldr	r3, [r4, #4]
 80012d6:	42a2      	cmp	r2, r4
 80012d8:	bf0c      	ite	eq
 80012da:	600b      	streq	r3, [r1, #0]
 80012dc:	6053      	strne	r3, [r2, #4]
 80012de:	4630      	mov	r0, r6
 80012e0:	f000 f85a 	bl	8001398 <__malloc_unlock>
 80012e4:	f104 000b 	add.w	r0, r4, #11
 80012e8:	1d23      	adds	r3, r4, #4
 80012ea:	f020 0007 	bic.w	r0, r0, #7
 80012ee:	1ac2      	subs	r2, r0, r3
 80012f0:	d0cc      	beq.n	800128c <_malloc_r+0x20>
 80012f2:	1a1b      	subs	r3, r3, r0
 80012f4:	50a3      	str	r3, [r4, r2]
 80012f6:	e7c9      	b.n	800128c <_malloc_r+0x20>
 80012f8:	4622      	mov	r2, r4
 80012fa:	6864      	ldr	r4, [r4, #4]
 80012fc:	e7cc      	b.n	8001298 <_malloc_r+0x2c>
 80012fe:	1cc4      	adds	r4, r0, #3
 8001300:	f024 0403 	bic.w	r4, r4, #3
 8001304:	42a0      	cmp	r0, r4
 8001306:	d0e3      	beq.n	80012d0 <_malloc_r+0x64>
 8001308:	1a21      	subs	r1, r4, r0
 800130a:	4630      	mov	r0, r6
 800130c:	f000 f82e 	bl	800136c <_sbrk_r>
 8001310:	3001      	adds	r0, #1
 8001312:	d1dd      	bne.n	80012d0 <_malloc_r+0x64>
 8001314:	e7cf      	b.n	80012b6 <_malloc_r+0x4a>
 8001316:	bf00      	nop
 8001318:	20000090 	.word	0x20000090
 800131c:	20000094 	.word	0x20000094

08001320 <_realloc_r>:
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001322:	4607      	mov	r7, r0
 8001324:	4614      	mov	r4, r2
 8001326:	460e      	mov	r6, r1
 8001328:	b921      	cbnz	r1, 8001334 <_realloc_r+0x14>
 800132a:	4611      	mov	r1, r2
 800132c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001330:	f7ff bf9c 	b.w	800126c <_malloc_r>
 8001334:	b922      	cbnz	r2, 8001340 <_realloc_r+0x20>
 8001336:	f7ff ff4d 	bl	80011d4 <_free_r>
 800133a:	4625      	mov	r5, r4
 800133c:	4628      	mov	r0, r5
 800133e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001340:	f000 f830 	bl	80013a4 <_malloc_usable_size_r>
 8001344:	42a0      	cmp	r0, r4
 8001346:	d20f      	bcs.n	8001368 <_realloc_r+0x48>
 8001348:	4621      	mov	r1, r4
 800134a:	4638      	mov	r0, r7
 800134c:	f7ff ff8e 	bl	800126c <_malloc_r>
 8001350:	4605      	mov	r5, r0
 8001352:	2800      	cmp	r0, #0
 8001354:	d0f2      	beq.n	800133c <_realloc_r+0x1c>
 8001356:	4631      	mov	r1, r6
 8001358:	4622      	mov	r2, r4
 800135a:	f7ff ff13 	bl	8001184 <memcpy>
 800135e:	4631      	mov	r1, r6
 8001360:	4638      	mov	r0, r7
 8001362:	f7ff ff37 	bl	80011d4 <_free_r>
 8001366:	e7e9      	b.n	800133c <_realloc_r+0x1c>
 8001368:	4635      	mov	r5, r6
 800136a:	e7e7      	b.n	800133c <_realloc_r+0x1c>

0800136c <_sbrk_r>:
 800136c:	b538      	push	{r3, r4, r5, lr}
 800136e:	2300      	movs	r3, #0
 8001370:	4d05      	ldr	r5, [pc, #20]	; (8001388 <_sbrk_r+0x1c>)
 8001372:	4604      	mov	r4, r0
 8001374:	4608      	mov	r0, r1
 8001376:	602b      	str	r3, [r5, #0]
 8001378:	f7ff fb52 	bl	8000a20 <_sbrk>
 800137c:	1c43      	adds	r3, r0, #1
 800137e:	d102      	bne.n	8001386 <_sbrk_r+0x1a>
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	b103      	cbz	r3, 8001386 <_sbrk_r+0x1a>
 8001384:	6023      	str	r3, [r4, #0]
 8001386:	bd38      	pop	{r3, r4, r5, pc}
 8001388:	20000098 	.word	0x20000098

0800138c <__malloc_lock>:
 800138c:	4801      	ldr	r0, [pc, #4]	; (8001394 <__malloc_lock+0x8>)
 800138e:	f000 b811 	b.w	80013b4 <__retarget_lock_acquire_recursive>
 8001392:	bf00      	nop
 8001394:	200000a0 	.word	0x200000a0

08001398 <__malloc_unlock>:
 8001398:	4801      	ldr	r0, [pc, #4]	; (80013a0 <__malloc_unlock+0x8>)
 800139a:	f000 b80c 	b.w	80013b6 <__retarget_lock_release_recursive>
 800139e:	bf00      	nop
 80013a0:	200000a0 	.word	0x200000a0

080013a4 <_malloc_usable_size_r>:
 80013a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013a8:	1f18      	subs	r0, r3, #4
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	bfbc      	itt	lt
 80013ae:	580b      	ldrlt	r3, [r1, r0]
 80013b0:	18c0      	addlt	r0, r0, r3
 80013b2:	4770      	bx	lr

080013b4 <__retarget_lock_acquire_recursive>:
 80013b4:	4770      	bx	lr

080013b6 <__retarget_lock_release_recursive>:
 80013b6:	4770      	bx	lr

080013b8 <_init>:
 80013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ba:	bf00      	nop
 80013bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013be:	bc08      	pop	{r3}
 80013c0:	469e      	mov	lr, r3
 80013c2:	4770      	bx	lr

080013c4 <_fini>:
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c6:	bf00      	nop
 80013c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ca:	bc08      	pop	{r3}
 80013cc:	469e      	mov	lr, r3
 80013ce:	4770      	bx	lr
